package compiler.scanner;

/* The following code was generated by JFlex 1.4.3 on 3/5/13 4:35 PM */

import java_cup.runtime.*;
import compiler.parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/5/13 4:35 PM from the specification file
 * <tt>PBP.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEAMIDENTIFIER = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\7\0\1\70"+
    "\1\72\6\0\1\11\1\4\1\33\1\34\1\35\1\7\1\37\3\5"+
    "\1\6\6\0\1\64\1\46\1\41\1\53\1\27\1\56\1\66\1\62"+
    "\1\55\1\60\1\67\1\45\1\63\1\10\1\23\1\47\1\20\1\57"+
    "\1\12\1\40\1\10\1\52\4\10\1\71\1\0\1\73\3\0\1\14"+
    "\1\54\1\43\1\31\1\22\1\17\1\50\1\36\1\25\1\10\1\44"+
    "\1\42\1\26\1\30\1\16\1\51\1\10\1\15\1\32\1\13\1\21"+
    "\1\24\1\65\1\10\1\61\1\10\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\3\4\1\1\1\4\7\1\4\4"+
    "\21\1\1\5\1\6\1\0\1\2\1\7\1\10\2\0"+
    "\4\1\1\11\3\1\1\12\4\1\1\13\1\1\5\0"+
    "\3\1\1\14\16\1\1\15\6\1\1\16\16\1\1\0"+
    "\1\17\1\20\11\1\1\21\1\22\1\1\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\5\1\1\31\6\1\1\32"+
    "\4\1\1\33\5\1\1\34\4\1\1\35\16\1\1\36"+
    "\2\1\1\0\2\1\1\37\2\1\1\40\1\1\1\41"+
    "\7\1\1\42\6\1\1\43\1\44\1\45\3\1\1\46"+
    "\1\1\1\47\6\1\1\50\3\1\1\51\1\52\1\1"+
    "\1\53\4\1\1\54\1\55\1\56\3\1\1\0\1\57"+
    "\1\60\2\1\1\61\12\1\1\62\1\63\1\64\1\65"+
    "\2\1\1\66\3\1\1\67\16\1\1\70\1\1\1\71"+
    "\1\72\12\1\1\73\1\1\1\74\7\1\1\75\4\1"+
    "\1\76\1\77\1\1\1\0\2\1\1\100\6\1\1\101"+
    "\1\1\1\102\2\1\1\103\1\104\1\105\1\1\1\106"+
    "\1\107\1\110\1\111\1\112\1\1\1\70\1\1\1\113"+
    "\1\1\1\114\2\1\1\115\2\1\1\116\4\1\1\117"+
    "\1\120\1\1\1\121\1\122\1\123\3\1\1\124\3\1"+
    "\1\125\1\126\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\264\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\264\0\264\0\u0870"+
    "\0\u08ac\0\264\0\264\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u01a4\0\u0a50\0\u0a8c\0\u0ac8\0\u01a4\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u01a4\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u01a4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u10a4\0\u10e0\0\u111c\0\u01a4\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\u01a4\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\264\0\264\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u01a4\0\u189c"+
    "\0\u01a4\0\264\0\264\0\264\0\264\0\264\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u01a4\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u01a4\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u01a4"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u01a4\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184"+
    "\0\u21c0\0\u01a4\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u01a4"+
    "\0\u2328\0\u2364\0\u01a4\0\u23a0\0\u01a4\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u01a4\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u01a4\0\u01a4\0\u01a4\0\u26e8\0\u2724"+
    "\0\u2760\0\u01a4\0\u279c\0\u01a4\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u01a4\0\u2940\0\u297c\0\u29b8\0\u01a4\0\u01a4"+
    "\0\u29f4\0\u01a4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u01a4\0\u01a4\0\u2c10"+
    "\0\u2c4c\0\u01a4\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4"+
    "\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u01a4\0\u01a4\0\u01a4\0\u01a4"+
    "\0\u2ee0\0\u2f1c\0\u01a4\0\u2f58\0\u2f94\0\u2fd0\0\u01a4\0\u300c"+
    "\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u01a4"+
    "\0\u01a4\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534"+
    "\0\u3570\0\u35ac\0\u35e8\0\u01a4\0\u3624\0\u01a4\0\u3660\0\u369c"+
    "\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u01a4\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u01a4\0\u01a4\0\u38f4\0\u3930\0\u396c\0\u39a8"+
    "\0\u01a4\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u01a4"+
    "\0\u3b4c\0\u01a4\0\u3b88\0\u3bc4\0\u01a4\0\u01a4\0\u01a4\0\u3c00"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u01a4\0\u3c3c\0\264\0\u3c78"+
    "\0\u01a4\0\u3cb4\0\u01a4\0\u3cf0\0\u3d2c\0\u01a4\0\u3d68\0\u3da4"+
    "\0\u01a4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u01a4\0\u01a4\0\u3ed0"+
    "\0\u01a4\0\u01a4\0\u01a4\0\u3f0c\0\u3f48\0\u3f84\0\u01a4\0\u3fc0"+
    "\0\u3ffc\0\u4038\0\u01a4\0\u01a4\0\u01a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\2\10\1\13\1\14\1\10\1\15\2\10"+
    "\1\16\1\17\2\10\1\20\3\10\1\21\1\22\1\23"+
    "\1\10\1\24\1\25\1\26\3\10\1\27\1\30\1\31"+
    "\1\32\1\10\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\10\1\42\1\43\1\44\1\10\1\45\1\10"+
    "\1\46\1\47\6\0\1\50\3\0\1\51\1\50\21\51"+
    "\3\0\1\51\1\0\30\51\2\0\1\52\1\53\2\0"+
    "\1\4\171\0\2\6\1\0\1\6\1\0\1\6\20\0"+
    "\1\54\3\6\1\0\1\6\40\0\2\6\1\0\1\6"+
    "\1\0\1\6\21\0\3\6\1\0\1\6\40\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\55\17\0\3\6"+
    "\1\0\1\6\44\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\1\10\1\56\5\10"+
    "\1\57\1\60\10\10\3\0\1\61\1\0\1\62\1\10"+
    "\1\63\1\64\24\10\14\0\1\10\1\0\10\10\1\65"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\5\10\1\66\13\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\7\10\1\67\11\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\5\10\1\70\1\10\1\71"+
    "\2\10\1\72\6\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\20\10\1\73\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\16\10\1\74\2\10\3\0\1\10"+
    "\1\0\30\10\10\0\2\6\1\0\1\6\1\0\1\6"+
    "\16\0\1\75\2\0\3\6\1\0\1\6\40\0\2\6"+
    "\1\0\1\6\1\0\1\6\3\0\1\76\15\0\3\6"+
    "\1\0\1\6\11\0\1\77\26\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\100\17\0\3\6\1\0\1\6"+
    "\40\0\2\6\1\0\1\6\1\0\1\6\1\0\1\101"+
    "\17\0\3\6\1\0\1\6\44\0\1\10\1\0\3\10"+
    "\1\102\3\10\1\103\1\104\1\105\1\10\1\106\5\10"+
    "\3\0\1\107\1\0\30\10\14\0\1\10\1\0\21\10"+
    "\3\0\1\10\1\0\2\10\1\110\25\10\14\0\1\10"+
    "\1\0\2\10\1\111\1\10\1\112\14\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\2\10\1\113\1\10"+
    "\1\114\14\10\3\0\1\10\1\0\2\10\1\115\2\10"+
    "\1\116\22\10\14\0\1\10\1\0\2\10\1\117\1\10"+
    "\1\120\2\10\1\121\1\122\10\10\3\0\1\10\1\0"+
    "\1\123\15\10\1\124\11\10\14\0\1\10\1\0\2\10"+
    "\1\125\16\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\13\10\1\126\5\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\3\10\1\127\3\10\1\130\1\131"+
    "\2\10\1\132\5\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\21\10\1\133"+
    "\6\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\2\10\1\134\25\10\14\0\1\10\1\0\3\10\1\135"+
    "\1\136\6\10\1\137\5\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\4\10\1\140\2\10\1\141\1\142"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\7\10\1\143\11\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\4\10\1\144\14\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\2\10\1\145\10\10\1\146"+
    "\5\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\1\147\17\10\1\150\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\4\10\1\151\14\10\3\0\1\10\1\0"+
    "\30\10\10\0\2\152\1\0\1\152\1\0\1\152\21\0"+
    "\3\152\1\0\1\152\44\0\1\51\1\0\21\51\3\0"+
    "\1\51\1\0\30\51\17\0\1\153\116\0\1\154\45\0"+
    "\1\10\1\0\2\10\1\155\5\10\1\156\10\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\14\10\1\157\13\10\14\0\1\10\1\0"+
    "\21\10\3\0\1\10\1\0\3\10\1\160\24\10\14\0"+
    "\1\10\1\0\4\10\1\161\14\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\2\10\1\162\16\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\3\10\1\163"+
    "\15\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\21\10\3\0\1\10\1\0\11\10\1\164\16\10\14\0"+
    "\1\10\1\0\2\10\1\165\16\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\5\10\1\166\13\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\1\10\1\167"+
    "\17\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\10\10\1\170\10\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\17\10\1\171\1\10\3\0\1\10\1\0"+
    "\30\10\35\0\1\172\73\0\1\173\55\0\1\174\116\0"+
    "\1\175\73\0\1\176\45\0\1\10\1\0\2\10\1\177"+
    "\16\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\3\10\1\200\15\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\2\10\1\201\16\10\3\0\1\10\1\0"+
    "\3\10\1\202\24\10\14\0\1\10\1\0\14\10\1\203"+
    "\4\10\3\0\1\10\1\0\11\10\1\204\16\10\14\0"+
    "\1\10\1\0\3\10\1\205\15\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\4\10\1\206\14\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\21\10\1\207\6\10\14\0\1\10\1\0"+
    "\4\10\1\210\13\10\1\211\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\16\10\1\212\1\213\1\10\3\0"+
    "\1\10\1\0\2\10\1\214\1\215\24\10\14\0\1\10"+
    "\1\0\7\10\1\216\11\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\4\10\1\217\14\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\27\10\1\220\14\0\1\10\1\0\20\10\1\221"+
    "\3\0\1\10\1\0\2\10\1\222\25\10\14\0\1\10"+
    "\1\0\20\10\1\223\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\2\10\1\224"+
    "\25\10\14\0\1\10\1\0\3\10\1\225\15\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\1\226\20\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\13\10"+
    "\1\227\5\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\4\10\1\230\14\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\13\10\1\231\5\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\16\10\1\232\2\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\5\10"+
    "\1\233\13\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\20\10\1\234\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\2\10\1\235"+
    "\25\10\14\0\1\10\1\0\10\10\1\236\10\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\7\10\1\237"+
    "\11\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\16\10\1\240\2\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\2\10\1\241"+
    "\25\10\14\0\1\10\1\0\16\10\1\242\2\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\12\10\1\243"+
    "\6\10\3\0\1\10\1\0\10\10\1\244\3\10\1\245"+
    "\13\10\14\0\1\10\1\0\14\10\1\246\4\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\4\10\1\247"+
    "\14\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\17\10\1\250\1\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\20\10\1\251\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\1\252"+
    "\27\10\14\0\1\10\1\0\20\10\1\253\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\2\10\1\254\16\10"+
    "\3\0\1\10\1\0\30\10\12\0\1\255\75\0\1\10"+
    "\1\0\3\10\1\256\15\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\2\10\1\257\16\10\3\0\1\10"+
    "\1\0\11\10\1\260\16\10\14\0\1\10\1\0\20\10"+
    "\1\261\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\4\10\1\262\14\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\1\10\1\263\1\10\1\264\15\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\14\10\1\265"+
    "\4\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\10\10\1\266\10\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\2\10\1\267"+
    "\25\10\14\0\1\10\1\0\3\10\1\270\15\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\10\10\1\271"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\3\10\1\272\15\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\12\10\1\273\6\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\16\10\1\274\2\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\14\10\1\275"+
    "\4\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\21\10\3\0\1\276\1\0\30\10\14\0\1\10\1\0"+
    "\10\10\1\277\10\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\4\10\1\300\14\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\3\10\1\301\24\10\14\0\1\10\1\0\7\10\1\302"+
    "\11\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\20\10\1\303\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\1\10\1\304\17\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\4\10"+
    "\1\305\23\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\2\10\1\306\25\10\14\0\1\10\1\0\21\10"+
    "\3\0\1\10\1\0\4\10\1\307\23\10\14\0\1\10"+
    "\1\0\16\10\1\310\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\3\10"+
    "\1\311\24\10\14\0\1\10\1\0\20\10\1\312\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\14\10\1\313"+
    "\4\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\20\10\1\314\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\2\10\1\315\25\10"+
    "\14\0\1\10\1\0\20\10\1\316\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\16\10\1\317\2\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\2\10\1\320\25\10\14\0\1\10\1\0"+
    "\12\10\1\321\6\10\3\0\1\10\1\0\14\10\1\322"+
    "\13\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\4\10\1\323\23\10\14\0\1\10\1\0\10\10\1\324"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\21\10\3\0\1\10\1\0\3\10\1\325\24\10\14\0"+
    "\1\10\1\0\10\10\1\326\10\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\10\10\1\327\10\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\2\10\1\330\25\10\14\0\1\10\1\0"+
    "\21\10\3\0\1\10\1\0\10\10\1\331\17\10\14\0"+
    "\1\10\1\0\21\10\3\0\1\10\1\0\2\10\1\332"+
    "\25\10\14\0\1\10\1\0\16\10\1\333\2\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\10\10\1\334"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\7\10\1\335\11\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\4\10\1\336\14\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\11\10\1\337\16\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\4\10\1\340\23\10\14\0\1\10\1\0"+
    "\10\10\1\341\10\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\20\10\1\342\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\13\10\1\343\5\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\2\10\1\344\25\10\10\0\1\345\2\0\1\345"+
    "\1\0\1\345\21\0\3\345\46\0\1\10\1\0\1\10"+
    "\1\346\17\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\2\10\1\347\25\10"+
    "\14\0\1\10\1\0\1\10\1\350\17\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\16\10\1\351\2\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\1\10"+
    "\1\352\17\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\10\10\1\353\10\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\2\10\1\354\16\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\1\10\1\355\17\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\16\10"+
    "\1\356\2\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\1\10\1\357\17\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\10\10\1\360\10\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\2\10\1\361\1\10"+
    "\1\362\14\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\16\10\1\363\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\4\10\1\364\14\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\25\10\1\365\2\10\14\0\1\10\1\0\21\10"+
    "\3\0\1\10\1\0\4\10\1\366\23\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\11\10\1\367\16\10"+
    "\14\0\1\10\1\0\10\10\1\370\10\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\3\10\1\371\24\10\14\0\1\10\1\0\17\10"+
    "\1\372\1\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\4\10\1\373\23\10"+
    "\14\0\1\10\1\0\13\10\1\374\5\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\7\10\1\375\11\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\4\10"+
    "\1\376\14\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\20\10\1\377\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\2\10\1\u0100\16\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\13\10\1\u0101\5\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\21\10\3\0"+
    "\1\10\1\0\14\10\1\u0102\13\10\14\0\1\10\1\0"+
    "\16\10\1\u0103\2\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\4\10\1\u0104\14\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\10\10\1\u0105\17\10\14\0\1\10\1\0\10\10\1\u0106"+
    "\10\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\13\10\1\u0107\5\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\3\10\1\u0108\15\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\2\10\1\u0109\25\10\14\0\1\10\1\0\7\10\1\u010a"+
    "\11\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\10\10\1\u010b\10\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\20\10\1\u010c\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\1\10\1\u010d\17\10\3\0\1\10"+
    "\1\0\30\10\10\0\2\u010e\1\0\1\u010e\1\0\1\u010e"+
    "\21\0\3\u010e\1\0\1\u010e\44\0\1\10\1\0\13\10"+
    "\1\u010f\5\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\17\10\1\u0110\1\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\16\10\1\u0111\2\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\3\10\1\u0112\24\10\14\0\1\10\1\0\10\10"+
    "\1\u0113\10\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\20\10\1\u0114\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\13\10\1\u0115\5\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\21\10\3\0\1\10\1\0"+
    "\2\10\1\u0116\25\10\14\0\1\10\1\0\3\10\1\u0117"+
    "\15\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\12\10\1\u0118\6\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\13\10\1\u0119\5\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\7\10\1\u011a\11\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\4\10\1\u011b"+
    "\14\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\20\10\1\u011c\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\16\10\1\u011d\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\11\10"+
    "\1\u011e\16\10\14\0\1\10\1\0\16\10\1\u011f\2\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\1\10"+
    "\1\u0120\17\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\16\10\1\u0121\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\2\10"+
    "\1\u0122\25\10\14\0\1\10\1\0\20\10\1\u0123\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\16\10\1\u0124"+
    "\2\10\3\0\1\10\1\0\30\10\14\0\1\10\1\0"+
    "\2\10\1\u0125\16\10\3\0\1\10\1\0\30\10\14\0"+
    "\1\10\1\0\3\10\1\u0126\15\10\3\0\1\10\1\0"+
    "\30\10\14\0\1\10\1\0\16\10\1\u0127\2\10\3\0"+
    "\1\10\1\0\30\10\14\0\1\10\1\0\20\10\1\u0128"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\2\10"+
    "\1\u0129\16\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\16\10\1\u012a\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\17\10\1\u012b\1\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\1\10\1\u012c\17\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\10\10"+
    "\1\u012d\10\10\3\0\1\10\1\0\30\10\4\0\2\u012e"+
    "\1\0\71\u012e\10\0\1\10\1\0\1\10\1\u012f\17\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\10\10"+
    "\1\u0130\10\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\3\10\1\u0131\15\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\13\10\1\u0132\5\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\14\10\1\u0133\4\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\13\10"+
    "\1\u0134\5\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\4\10\1\u0135\14\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\10\10\1\u0136\10\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\3\10\1\u0137\24\10\14\0\1\10\1\0\1\10"+
    "\1\u0138\17\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\7\10\1\u0139\11\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\10\10"+
    "\1\u013a\17\10\14\0\1\10\1\0\2\10\1\u013b\16\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\13\10"+
    "\1\u013c\5\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\10\10\1\u013d\17\10"+
    "\14\0\1\10\1\0\10\10\1\u013e\10\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\10\10\1\u013f\10\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\1\10"+
    "\1\u0140\17\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\2\10\1\u0141\25\10"+
    "\14\0\1\10\1\0\21\10\3\0\1\10\1\0\10\10"+
    "\1\u0142\17\10\14\0\1\10\1\0\10\10\1\u0143\10\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\3\10"+
    "\1\u0144\15\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\17\10\1\u0145\1\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\16\10\1\u0146\2\10\3\0\1\10"+
    "\1\0\30\10\10\0\2\u0147\1\0\1\u0147\1\0\1\u0147"+
    "\21\0\3\u0147\1\0\1\u0147\44\0\1\10\1\0\7\10"+
    "\1\u0148\11\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\17\10\1\u0149\1\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\12\10\1\u014a\6\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\10\10\1\u014b\10\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\16\10"+
    "\1\u014c\2\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\7\10\1\u014d\11\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\3\10\1\u014e\15\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\2\10\1\u014f\16\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\3\10"+
    "\1\u0150\15\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\2\10\1\u0151\25\10"+
    "\14\0\1\10\1\0\4\10\1\u0152\14\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\13\10\1\u0153\5\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\17\10"+
    "\1\u0154\1\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\1\10\1\u0155\17\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\10\10\1\u0156\10\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\21\10\3\0\1\10"+
    "\1\0\10\10\1\u0157\17\10\14\0\1\10\1\0\16\10"+
    "\1\u0158\2\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\21\10\3\0\1\10\1\0\2\10\1\u0159\25\10"+
    "\14\0\1\10\1\0\1\10\1\u015a\17\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\16\10\1\u015b\2\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\16\10"+
    "\1\u015c\2\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\13\10\1\u015d\5\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\13\10\1\u015e\5\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\17\10\1\u015f\1\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\7\10"+
    "\1\u0160\11\10\3\0\1\10\1\0\30\10\14\0\1\10"+
    "\1\0\16\10\1\u0161\2\10\3\0\1\10\1\0\30\10"+
    "\14\0\1\10\1\0\4\10\1\u0162\14\10\3\0\1\10"+
    "\1\0\30\10\14\0\1\10\1\0\10\10\1\u0163\10\10"+
    "\3\0\1\10\1\0\30\10\14\0\1\10\1\0\21\10"+
    "\3\0\1\10\1\0\10\10\1\u0164\17\10\14\0\1\10"+
    "\1\0\16\10\1\u0165\2\10\3\0\1\10\1\0\30\10"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\1\11\4\1\1\11\34\1\2\11\1\0\1\1"+
    "\2\11\2\0\17\1\5\0\50\1\1\0\2\11\15\1"+
    "\5\11\56\1\1\0\67\1\1\0\110\1\1\0\30\1"+
    "\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[357];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return symbol(sym.VS_LITERAL);
          }
        case 88: break;
        case 75: 
          { return symbol(sym.REPLACED_LITERAL);
          }
        case 89: break;
        case 21: 
          { return symbol(sym.THIRD);
          }
        case 90: break;
        case 64: 
          { return symbol(sym.QUARTER_LITERAL);
          }
        case 91: break;
        case 62: 
          { return symbol(sym.MISSED_LITERAL);
          }
        case 92: break;
        case 28: 
          { return symbol(sym.PTS);
          }
        case 93: break;
        case 2: 
          { return symbol(sym.TEAM);
          }
        case 94: break;
        case 54: 
          { return symbol(sym.BLOCK_LITERAL);
          }
        case 95: break;
        case 9: 
          { return symbol(sym.ST);
          }
        case 96: break;
        case 23: 
          { return symbol(sym.FOURTH);
          }
        case 97: break;
        case 7: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_PAREN); 
          }
        case 98: break;
        case 33: 
          { return symbol(sym.SLAM_LITERAL);
          }
        case 99: break;
        case 34: 
          { return symbol(sym.TEAM_LITERAL);
          }
        case 100: break;
        case 42: 
          { return symbol(sym.FOUL_LITERAL);
          }
        case 101: break;
        case 67: 
          { return symbol(sym.DRIVING_LITERAL);
          }
        case 102: break;
        case 53: 
          { return symbol(sym.LOOSE_LITERAL);
          }
        case 103: break;
        case 59: 
          { return symbol(sym.BOUNDS_LITERAL);
          }
        case 104: break;
        case 78: 
          { return symbol(sym.PERSONAL_LITERAL);
          }
        case 105: break;
        case 26: 
          { return symbol(sym.BAD_LITERAL);
          }
        case 106: break;
        case 85: 
          { return symbol(sym.DISCONTINUE_LITERAL);
          }
        case 107: break;
        case 48: 
          { return symbol(sym.STEAL_LITERAL);
          }
        case 108: break;
        case 66: 
          { return symbol(sym.PALMING_LITERAL);
          }
        case 109: break;
        case 16: 
          { return symbol(sym.FIFTH);
          }
        case 110: break;
        case 10: 
          { return symbol(sym.OF_LITERAL);
          }
        case 111: break;
        case 76: 
          { return symbol(sym.OVERTIME_LITERAL);
          }
        case 112: break;
        case 25: 
          { return symbol(sym.TIP_LITERAL);
          }
        case 113: break;
        case 12: 
          { return symbol(sym.TO);
          }
        case 114: break;
        case 6: 
          { yybegin(TEAMIDENTIFIER); return symbol(sym.LEFT_BRAC); 
          }
        case 115: break;
        case 46: 
          { return symbol(sym.MADE_LITERAL);
          }
        case 116: break;
        case 69: 
          { return symbol(sym.DEFENSE_LITERAL);
          }
        case 117: break;
        case 5: 
          { yybegin(TEAMIDENTIFIER); return symbol(sym.LEFT_PAREN); 
          }
        case 118: break;
        case 17: 
          { return symbol(sym.OFF);
          }
        case 119: break;
        case 84: 
          { return symbol(sym.TURNAROUND_LITERAL);
          }
        case 120: break;
        case 57: 
          { return symbol(sym.SECOND_LITERAL);
          }
        case 121: break;
        case 77: 
          { return symbol(sym.TURNOVER_LITERAL);
          }
        case 122: break;
        case 29: 
          { return symbol(sym.DEF);
          }
        case 123: break;
        case 58: 
          { return symbol(sym.SCREEN_LITERAL);
          }
        case 124: break;
        case 81: 
          { return symbol(sym.TECHNICAL_LITERAL);
          }
        case 125: break;
        case 24: 
          { return symbol(sym.SIXTH);
          }
        case 126: break;
        case 8: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_BRAC); 
          }
        case 127: break;
        case 65: 
          { return symbol(sym.TIMEOUT_LITERAL);
          }
        case 128: break;
        case 13: 
          { return symbol(sym.PF);
          }
        case 129: break;
        case 71: 
          { return symbol(sym.RUNNING_LITERAL);
          }
        case 130: break;
        case 86: 
          { return symbol(sym.GOALTENDING_LITERAL);
          }
        case 131: break;
        case 44: 
          { return symbol(sym.JUMP_LITERAL);
          }
        case 132: break;
        case 15: 
          { return symbol(sym.FIRST);
          }
        case 133: break;
        case 68: 
          { return symbol(sym.DRIBBLE_LITERAL);
          }
        case 134: break;
        case 19: 
          { return symbol(sym.END_LITERAL);
          }
        case 135: break;
        case 52: 
          { return symbol(sym.LAYUP_LITERAL);
          }
        case 136: break;
        case 87: 
          { return symbol(sym.SUBSTITUTION_LITERAL);
          }
        case 137: break;
        case 39: 
          { return symbol(sym.POSS_LITERAL);
          }
        case 138: break;
        case 4: 
          { return symbol(sym.NUMBER);
          }
        case 139: break;
        case 74: 
          { return symbol(sym.REBOUND_LITERAL);
          }
        case 140: break;
        case 60: 
          { return symbol(sym.PULLUP_LITERAL);
          }
        case 141: break;
        case 32: 
          { return symbol(sym.SHOT_LITERAL);
          }
        case 142: break;
        case 31: 
          { return symbol(sym.STEP_LITERAL);
          }
        case 143: break;
        case 49: 
          { return symbol(sym.SHORT_LITERAL);
          }
        case 144: break;
        case 14: 
          { return symbol(sym.BY_LITERAL);
          }
        case 145: break;
        case 61: 
          { return symbol(sym.FINGER_LITERAL);
          }
        case 146: break;
        case 18: 
          { return symbol(sym.OUT_LITERAL);
          }
        case 147: break;
        case 63: 
          { return symbol(sym.ASSIST_LITERAL);
          }
        case 148: break;
        case 1: 
          { return symbol(sym.PLAYER_NAME);
          }
        case 149: break;
        case 35: 
          { return symbol(sym.LOST_LITERAL);
          }
        case 150: break;
        case 20: 
          { return symbol(sym.SECOND);
          }
        case 151: break;
        case 41: 
          { return symbol(sym.FREE_LITERAL);
          }
        case 152: break;
        case 79: 
          { return symbol(sym.OFFENSIVE_LITERAL);
          }
        case 153: break;
        case 47: 
          { return symbol(sym.START_LITERAL);
          }
        case 154: break;
        case 27: 
          { return symbol(sym.BLK);
          }
        case 155: break;
        case 73: 
          { return symbol(sym.REGULAR_LITERAL);
          }
        case 156: break;
        case 80: 
          { return symbol(sym.TRAVELING_LITERAL);
          }
        case 157: break;
        case 38: 
          { return symbol(sym.PASS_LITERAL);
          }
        case 158: break;
        case 43: 
          { return symbol(sym.ROLL_LITERAL);
          }
        case 159: break;
        case 37: 
          { return symbol(sym.BALL_LITERAL);
          }
        case 160: break;
        case 50: 
          { return symbol(sym.THROW_LITERAL);
          }
        case 161: break;
        case 30: 
          { return symbol(sym.AST);
          }
        case 162: break;
        case 72: 
          { return symbol(sym.REVERSE_LITERAL);
          }
        case 163: break;
        case 55: 
          { return symbol(sym.GAINS_LITERAL);
          }
        case 164: break;
        case 56: 
          { return symbol(sym.TIME);
          }
        case 165: break;
        case 36: 
          { return symbol(sym.BANK_LITERAL);
          }
        case 166: break;
        case 40: 
          { return symbol(sym.DUNK_LITERAL);
          }
        case 167: break;
        case 82: 
          { return symbol(sym.BACKCOURT_LITERAL);
          }
        case 168: break;
        case 51: 
          { return symbol(sym.CLOCK_LITERAL);
          }
        case 169: break;
        case 22: 
          { return symbol(sym.THREEPT_LITERAL);
          }
        case 170: break;
        case 70: 
          { return symbol(sym.ILLEGAL_LITERAL);
          }
        case 171: break;
        case 83: 
          { return symbol(sym.VIOLATION_LITERAL);
          }
        case 172: break;
        case 3: 
          { 
          }
        case 173: break;
        case 45: 
          { return symbol(sym.HOOK_LITERAL);
          }
        case 174: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
