package compiler.parser;

//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 05 14:55:11 CST 2013
//----------------------------------------------------

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 05 14:55:11 CST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\006\006\000\002\007\006\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\004\000\002\013\004\000\002\013\002" +
    "\000\002\014\004\000\002\015\005\000\002\015\007\000" +
    "\002\015\007\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\014" +
    "\000\002\020\006\000\002\021\004\000\002\021\003\000" +
    "\002\021\004\000\002\021\003\000\002\021\005\000\002" +
    "\021\004\000\002\021\003\000\002\022\006\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\025\006" +
    "\000\002\026\005\000\002\027\005\000\002\027\005\000" +
    "\002\030\004\000\002\030\004\000\002\030\003\000\002" +
    "\030\004\000\002\030\010\000\002\030\007\000\002\030" +
    "\005\000\002\030\006\000\002\030\004\000\002\030\005" +
    "\000\002\030\004\000\002\030\003\000\002\030\004\000" +
    "\002\031\006\000\002\032\011\000\002\032\002\000\002" +
    "\033\010\000\002\034\006\000\002\034\004\000\002\035" +
    "\003\000\002\035\003\000\002\036\006\000\002\037\005" +
    "\000\002\040\004\000\002\040\004\000\002\040\005\000" +
    "\002\040\004\000\002\040\005\000\002\040\005\000\002" +
    "\040\004\000\002\040\006\000\002\040\004\000\002\040" +
    "\005\000\002\040\007\000\002\040\003\000\002\040\005" +
    "\000\002\040\004\000\002\041\005\000\002\041\004\000" +
    "\002\042\011\000\002\042\002\000\002\043\011\000\002" +
    "\043\002\000\002\044\004\000\002\045\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\004\004\005\001\002\000\004\002\335\001" +
    "\002\000\004\005\332\001\002\000\006\130\015\131\014" +
    "\001\002\000\004\002\001\001\002\000\006\002\ufffd\004" +
    "\005\001\002\000\004\002\uffff\001\002\000\006\002\ufffd" +
    "\004\005\001\002\000\004\002\ufffe\001\002\000\004\127" +
    "\325\001\002\000\004\127\323\001\002\000\010\010\uffef" +
    "\130\015\131\014\001\002\000\004\010\304\001\002\000" +
    "\044\020\031\043\045\046\043\047\034\050\042\053\024" +
    "\054\040\055\027\056\033\060\041\061\046\063\025\065" +
    "\023\071\044\073\051\075\022\100\037\001\002\000\010" +
    "\010\uffe9\130\uffe9\131\uffe9\001\002\000\004\134\277\001" +
    "\002\000\004\063\276\001\002\000\004\021\275\001\002" +
    "\000\004\134\uffaf\001\002\000\010\010\uffee\130\uffee\131" +
    "\uffee\001\002\000\004\050\273\001\002\000\010\010\uffea" +
    "\130\uffea\131\uffea\001\002\000\004\134\205\001\002\000" +
    "\010\010\uffe6\130\uffe6\131\uffe6\001\002\000\004\021\204" +
    "\001\002\000\004\050\202\001\002\000\010\010\uffe3\130" +
    "\uffe3\131\uffe3\001\002\000\004\134\155\001\002\000\004" +
    "\101\152\001\002\000\010\053\143\057\141\062\142\001" +
    "\002\000\006\021\137\064\136\001\002\000\006\021\125" +
    "\024\124\001\002\000\004\021\123\001\002\000\004\130" +
    "\112\001\002\000\004\134\071\001\002\000\004\060\067" +
    "\001\002\000\010\010\uffe8\130\uffe8\131\uffe8\001\002\000" +
    "\010\010\uffe7\130\uffe7\131\uffe7\001\002\000\004\074\054" +
    "\001\002\000\010\010\uffe5\130\uffe5\131\uffe5\001\002\000" +
    "\010\010\uffe4\130\uffe4\131\uffe4\001\002\000\004\135\055" +
    "\001\002\000\004\005\056\001\002\000\004\135\057\001" +
    "\002\000\006\066\060\130\061\001\002\000\010\010\uffbe" +
    "\130\uffbe\131\uffbe\001\002\000\004\135\064\001\002\000" +
    "\010\010\uffbd\130\uffbd\131\uffbd\001\002\000\010\010\uffc1" +
    "\130\uffc1\131\uffc1\001\002\000\004\120\065\001\002\000" +
    "\004\132\066\001\002\000\012\010\uffbc\072\uffbc\130\uffbc" +
    "\131\uffbc\001\002\000\004\021\070\001\002\000\004\134" +
    "\uffb1\001\002\000\014\044\076\106\073\107\077\111\072" +
    "\113\074\001\002\000\004\130\uffdd\001\002\000\004\024" +
    "\111\001\002\000\004\135\107\001\002\000\004\130\102" +
    "\001\002\000\006\110\101\130\uffda\001\002\000\006\070" +
    "\100\130\uffdf\001\002\000\004\130\uffdb\001\002\000\004" +
    "\130\uffde\001\002\000\004\135\104\001\002\000\010\010" +
    "\uffe1\130\uffe1\131\uffe1\001\002\000\004\117\105\001\002" +
    "\000\004\132\106\001\002\000\010\010\uffd9\130\uffd9\131" +
    "\uffd9\001\002\000\004\103\110\001\002\000\004\130\uffdc" +
    "\001\002\000\004\130\uffe0\001\002\000\004\122\114\001" +
    "\002\000\010\010\uffa6\130\uffa6\131\uffa6\001\002\000\004" +
    "\134\115\001\002\000\004\135\116\001\002\000\004\123" +
    "\117\001\002\000\004\134\120\001\002\000\004\135\121" +
    "\001\002\000\004\132\122\001\002\000\010\010\uffa5\130" +
    "\uffa5\131\uffa5\001\002\000\004\134\uffba\001\002\000\004" +
    "\125\126\001\002\000\004\134\uffb9\001\002\000\004\051" +
    "\127\001\002\000\004\125\130\001\002\000\004\130\131" +
    "\001\002\000\004\125\132\001\002\000\004\052\133\001" +
    "\002\000\004\112\134\001\002\000\004\132\135\001\002" +
    "\000\010\010\uffe2\130\uffe2\131\uffe2\001\002\000\004\021" +
    "\140\001\002\000\004\134\uffb2\001\002\000\004\134\uffae" +
    "\001\002\000\004\053\150\001\002\000\004\114\145\001" +
    "\002\000\004\021\144\001\002\000\004\134\uffb6\001\002" +
    "\000\004\053\146\001\002\000\004\021\147\001\002\000" +
    "\004\134\uffb0\001\002\000\004\021\151\001\002\000\004" +
    "\134\uffb3\001\002\000\004\102\153\001\002\000\004\125" +
    "\154\001\002\000\010\010\uffd5\130\uffd5\131\uffd5\001\002" +
    "\000\006\066\157\067\156\001\002\000\004\130\061\001" +
    "\002\000\012\010\uffa7\070\162\130\uffa7\131\uffa7\001\002" +
    "\000\010\010\uffbb\130\uffbb\131\uffbb\001\002\000\010\010" +
    "\uffab\130\uffab\131\uffab\001\002\000\004\134\163\001\002" +
    "\000\004\125\164\001\002\000\004\130\165\001\002\000" +
    "\004\135\166\001\002\000\004\121\167\001\002\000\004" +
    "\132\170\001\002\000\010\010\uffa8\130\uffa8\131\uffa8\001" +
    "\002\000\012\010\uffa9\072\173\130\uffa9\131\uffa9\001\002" +
    "\000\010\010\uffac\130\uffac\131\uffac\001\002\000\004\134" +
    "\174\001\002\000\004\125\175\001\002\000\004\130\176" +
    "\001\002\000\004\135\177\001\002\000\004\124\200\001" +
    "\002\000\004\132\201\001\002\000\010\010\uffaa\130\uffaa" +
    "\131\uffaa\001\002\000\004\021\203\001\002\000\004\134" +
    "\uffb8\001\002\000\004\134\uffb4\001\002\000\036\021\216" +
    "\023\210\025\206\027\220\030\225\031\217\033\215\035" +
    "\211\036\222\040\221\042\224\043\207\044\212\135\213" +
    "\001\002\000\004\026\272\001\002\000\004\130\uffc6\001" +
    "\002\000\004\024\271\001\002\000\004\023\266\001\002" +
    "\000\004\105\265\001\002\000\004\103\263\001\002\000" +
    "\004\130\247\001\002\000\004\031\242\001\002\000\004" +
    "\022\240\001\002\000\004\005\233\001\002\000\004\130" +
    "\uffcf\001\002\000\004\041\231\001\002\000\004\037\230" +
    "\001\002\000\010\010\uffd4\130\uffd4\131\uffd4\001\002\000" +
    "\004\020\227\001\002\000\004\020\226\001\002\000\004" +
    "\130\uffce\001\002\000\004\130\uffc7\001\002\000\004\130" +
    "\uffc9\001\002\000\004\020\232\001\002\000\004\130\uffc8" +
    "\001\002\000\004\032\234\001\002\000\004\023\235\001" +
    "\002\000\004\024\236\001\002\000\004\020\237\001\002" +
    "\000\004\130\uffcd\001\002\000\004\020\241\001\002\000" +
    "\010\010\uffd3\130\uffd3\131\uffd3\001\002\000\004\005\243" +
    "\001\002\000\004\032\244\001\002\000\004\020\245\001" +
    "\002\000\004\130\uffcc\001\002\000\012\010\uffc2\045\254" +
    "\130\uffc2\131\uffc2\001\002\000\004\135\250\001\002\000" +
    "\004\115\251\001\002\000\004\132\252\001\002\000\012" +
    "\010\uffc4\045\uffc4\130\uffc4\131\uffc4\001\002\000\010\010" +
    "\uffd2\130\uffd2\131\uffd2\001\002\000\004\134\255\001\002" +
    "\000\004\125\256\001\002\000\004\130\257\001\002\000" +
    "\004\135\260\001\002\000\004\116\261\001\002\000\004" +
    "\132\262\001\002\000\010\010\uffc3\130\uffc3\131\uffc3\001" +
    "\002\000\004\034\264\001\002\000\004\130\uffcb\001\002" +
    "\000\004\130\uffc5\001\002\000\004\024\267\001\002\000" +
    "\004\020\270\001\002\000\004\130\uffca\001\002\000\004" +
    "\130\uffd1\001\002\000\004\130\uffd0\001\002\000\004\021" +
    "\274\001\002\000\004\134\uffb5\001\002\000\004\134\uffb7" +
    "\001\002\000\004\134\uffad\001\002\000\006\076\302\077" +
    "\301\001\002\000\010\010\uffd8\130\uffd8\131\uffd8\001\002" +
    "\000\010\010\uffd6\130\uffd6\131\uffd6\001\002\000\010\010" +
    "\uffd7\130\uffd7\131\uffd7\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\005\305\001\002\000\016\011\314\012" +
    "\307\013\310\014\312\015\313\016\306\001\002\000\006" +
    "\006\ufff4\007\ufff4\001\002\000\006\006\ufff8\007\ufff8\001" +
    "\002\000\006\006\ufff7\007\ufff7\001\002\000\006\006\316" +
    "\007\315\001\002\000\006\006\ufff6\007\ufff6\001\002\000" +
    "\006\006\ufff5\007\ufff5\001\002\000\006\006\ufff9\007\ufff9" +
    "\001\002\000\012\002\ufff2\004\ufff2\130\ufff2\131\ufff2\001" +
    "\002\000\012\002\ufff3\004\ufff3\130\ufff3\131\ufff3\001\002" +
    "\000\006\002\ufffa\004\ufffa\001\002\000\004\010\ufff1\001" +
    "\002\000\010\010\uffef\130\015\131\014\001\002\000\004" +
    "\010\ufff0\001\002\000\004\132\324\001\002\000\044\020" +
    "\uffed\043\uffed\046\uffed\047\uffed\050\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\060\uffed\061\uffed\063\uffed\065\uffed\071" +
    "\uffed\073\uffed\075\uffed\100\uffed\001\002\000\004\126\326" +
    "\001\002\000\004\133\327\001\002\000\006\017\330\125" +
    "\331\001\002\000\044\020\uffec\043\uffec\046\uffec\047\uffec" +
    "\050\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060\uffec\061" +
    "\uffec\063\uffec\065\uffec\071\uffec\073\uffec\075\uffec\100\uffec" +
    "\001\002\000\044\020\uffeb\043\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb\061\uffeb" +
    "\063\uffeb\065\uffeb\071\uffeb\073\uffeb\075\uffeb\100\uffeb\001" +
    "\002\000\016\011\314\012\307\013\310\014\312\015\313" +
    "\016\306\001\002\000\006\006\316\007\315\001\002\000" +
    "\006\130\ufffb\131\ufffb\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\012\002\003\003\006\005\007\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\016" +
    "\014\015\015\017\001\001\000\002\001\001\000\010\004" +
    "\010\005\011\006\005\001\001\000\002\001\001\000\010" +
    "\004\012\005\011\006\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\317\014\320" +
    "\015\017\001\001\000\004\007\302\001\001\000\026\016" +
    "\025\017\027\020\020\023\046\025\047\026\031\033\051" +
    "\037\052\040\035\044\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\062\036\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\157" +
    "\001\001\000\004\036\170\001\001\000\004\043\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\222" +
    "\030\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\321\014\320\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\332\001\001\000\004" +
    "\011\333\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
	  return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rebound_predicate ::= LEFT_PAREN OFF COLON NUMBER DEF COLON NUMBER RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound_predicate",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rebound ::= REBOUND_LITERAL rebound_predicate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // block_statement ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // block_statement ::= BLOCK_LITERAL COLON PLAYER_NAME LEFT_PAREN NUMBER BLK RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assist_statement ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assist_statement ::= ASSIST_LITERAL COLON PLAYER_NAME LEFT_PAREN NUMBER AST RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // shot_outcome ::= MISSED_LITERAL block_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_outcome",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // shot_outcome ::= MADE_LITERAL point_total assist_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_outcome",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // shot_type ::= SLAM_LITERAL DUNK_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // shot_type ::= HOOK_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // shot_type ::= DUNK_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // shot_type ::= DRIVING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // shot_type ::= TURNAROUND_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // shot_type ::= HOOK_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // shot_type ::= DRIVING_LITERAL REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // shot_type ::= TIP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // shot_type ::= PULLUP_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // shot_type ::= DRIVING_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // shot_type ::= LAYUP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // shot_type ::= RUNNING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // shot_type ::= JUMP_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // shot_type ::= THREEPT_LITERAL SHOT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // shot ::= shot_type COLON shot_outcome 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // point_total ::= LEFT_PAREN NUMBER PTS RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_total",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // free_throw_outcome ::= point_total 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // free_throw_outcome ::= MISSED_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // free_throw_predicate ::= TECHNICAL_LITERAL free_throw_outcome 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // free_throw_predicate ::= NUMBER OF_LITERAL NUMBER free_throw_outcome 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // free_throw ::= FREE_LITERAL THROW_LITERAL NUMBER OF_LITERAL NUMBER free_throw_outcome 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // steal_statement ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // steal_statement ::= STEAL_LITERAL COLON PLAYER_NAME LEFT_PAREN NUMBER ST RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal_statement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // turnover_total ::= LEFT_PAREN NUMBER TO RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_total",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // turnover_type ::= OFFENSIVE_LITERAL GOALTENDING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // turnover_type ::= FOUL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // turnover_type ::= BACKCOURT_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // turnover_type ::= ILLEGAL_LITERAL SCREEN_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // turnover_type ::= DISCONTINUE_LITERAL DRIBBLE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // turnover_type ::= POSS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // turnover_type ::= NUMBER SECOND_LITERAL VIOLATION_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // turnover_type ::= STEP_LITERAL OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // turnover_type ::= PALMING_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // turnover_type ::= TRAVELING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // turnover_type ::= BAD_LITERAL PASS_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // turnover_type ::= LOST_LITERAL BALL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // turnover_predicate ::= turnover_type turnover_total steal_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_predicate",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // turnover_predicate ::= SHOT_LITERAL CLOCK_LITERAL TURNOVER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_predicate",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // turnover ::= TURNOVER_LITERAL COLON turnover_predicate 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // substitution ::= SUBSTITUTION_LITERAL REPLACED_LITERAL BY_LITERAL PLAYER_NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("substitution",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // timeout_type ::= SHORT_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // timeout_type ::= REGULAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // team_timeout ::= TIMEOUT_LITERAL COLON timeout_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_timeout",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // foul_total ::= LEFT_PAREN NUMBER PF RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // foul_type ::= OFFENSIVE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // foul_type ::= PERSONAL_LITERAL BLOCK_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // foul_type ::= DEFENSE_LITERAL NUMBER SECOND_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // foul_type ::= SHOOTING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // foul_type ::= OFFENSIVE_LITERAL CHARGE_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // foul_type ::= PERSONAL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // foul_type ::= LOOSE_LITERAL BALL_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // foul ::= FOUL_LITERAL COLON foul_type foul_total 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // jump_ball ::= JUMP_LITERAL BALL_LITERAL PLAYER_NAME VS_LITERAL PLAYER_NAME LEFT_PAREN PLAYER_NAME GAINS_LITERAL POSSESSION_LITERAL RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // play_action ::= rebound 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // play_action ::= shot 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // play_action ::= free_throw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // play_action ::= turnover 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // play_action ::= substitution 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // play_action ::= team_timeout 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // play_action ::= foul 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // play_action ::= jump_ball 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // identifying_timestamp ::= LEFT_BRAC TIME TEAM RIGHT_BRAC PLAYER_NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // identifying_timestamp ::= LEFT_BRAC TIME TEAM RIGHT_BRAC TEAM_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // identifying_timestamp ::= LEFT_PAREN TIME RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // play ::= identifying_timestamp play_action 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // plays_p ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // plays_p ::= play plays_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plays ::= play plays_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // period_type ::= OVERTIME_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // period_type ::= QUARTER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // period_identifier ::= SIXTH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // period_identifier ::= FIFTH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // period_identifier ::= FOURTH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // period_identifier ::= THIRD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // period_identifier ::= SECOND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // period_identifier ::= FIRST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_of_period ::= END_LITERAL OF_LITERAL period_identifier period_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_of_period",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_of_period ::= START_LITERAL OF_LITERAL period_identifier period_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_of_period",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // period ::= start_of_period plays end_of_period 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("period",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // periods_p ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // periods_p ::= period periods_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // periods ::= period periods_p 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= game EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // game ::= periods 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

