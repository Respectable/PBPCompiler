package compiler.scanner;

/* The following code was generated by JFlex 1.4.3 on 3/23/13 12:07 AM */

import java_cup.runtime.*;
import compiler.parser.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/13 12:07 AM from the specification file
 * <tt>PBP.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int LEFTPARENBRANCH = 2;
  public static final int YYINITIAL = 0;
  public static final int TEAMIDENTIFIER = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\6\0\1\11"+
    "\1\76\1\100\2\0\1\101\1\72\1\11\1\0\1\12\1\4\1\34"+
    "\1\35\1\36\1\7\1\40\3\5\1\6\6\0\1\65\1\47\1\42"+
    "\1\54\1\30\1\57\1\67\1\63\1\56\1\61\1\70\1\46\1\64"+
    "\1\71\1\21\1\50\1\22\1\60\1\13\1\41\1\73\1\53\4\10"+
    "\1\77\1\0\1\102\3\0\1\15\1\55\1\44\1\32\1\24\1\20"+
    "\1\51\1\37\1\26\1\74\1\45\1\43\1\27\1\31\1\17\1\52"+
    "\1\10\1\16\1\33\1\14\1\23\1\25\1\66\1\75\1\62\1\10"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\2\5\1\6\1\5\1\1"+
    "\1\5\11\1\4\5\24\1\1\7\1\10\1\11\1\12"+
    "\2\13\1\2\1\13\1\2\2\3\1\14\1\15\2\0"+
    "\4\1\1\16\4\1\1\17\3\1\1\17\3\1\1\20"+
    "\5\1\5\0\2\1\1\21\24\1\1\22\10\1\1\23"+
    "\25\1\1\24\1\13\1\0\1\2\1\3\1\25\1\26"+
    "\4\1\1\27\7\1\1\30\1\1\1\31\2\1\1\32"+
    "\4\1\1\33\1\34\1\35\1\36\1\37\7\1\1\40"+
    "\12\1\1\41\6\1\1\42\10\1\1\43\7\1\1\44"+
    "\27\1\1\45\7\1\1\0\1\46\1\0\2\1\1\47"+
    "\3\1\1\50\2\1\1\51\3\1\1\52\11\1\1\53"+
    "\2\1\1\54\3\1\1\55\3\1\1\56\2\1\1\57"+
    "\1\60\1\1\1\61\1\62\3\1\1\63\1\64\1\1"+
    "\1\65\4\1\1\66\6\1\1\67\6\1\1\70\1\71"+
    "\1\72\4\1\1\73\6\1\1\74\1\75\1\76\3\1"+
    "\1\77\1\100\3\1\2\0\1\101\1\102\3\1\1\103"+
    "\4\1\1\104\15\1\1\105\1\1\1\106\1\107\1\110"+
    "\1\111\3\1\1\112\1\113\5\1\1\114\6\1\1\115"+
    "\5\1\1\116\14\1\1\117\3\1\1\120\1\121\2\1"+
    "\1\122\1\1\1\123\6\1\1\124\1\1\1\125\6\1"+
    "\1\126\1\127\1\1\1\130\3\1\1\131\5\1\1\132"+
    "\6\1\1\133\3\1\1\134\2\1\1\135\1\1\1\136"+
    "\1\137\1\140\1\1\1\141\1\1\2\0\1\142\7\1"+
    "\1\143\6\1\1\144\1\1\1\145\1\146\1\147\3\1"+
    "\1\150\1\151\1\152\2\1\1\153\1\154\1\155\3\1"+
    "\1\156\1\157\1\160\1\161\2\1\1\120\1\121\1\1"+
    "\1\162\1\163\1\164\1\1\1\165\1\166\1\167\1\170"+
    "\2\1\1\171\2\1\1\172\4\1\1\173\1\174\1\175"+
    "\3\1\1\176\1\177\1\1\1\200\1\201\1\1\1\202"+
    "\1\203\4\1\1\204\1\205\4\1\1\206\1\207\1\1"+
    "\1\210\7\1\1\211";

  private static int [] zzUnpackAction() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u010c"+
    "\0\u01d5\0\u0218\0\u010c\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f"+
    "\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u010c\0\u010c\0\u010c\0\u010c"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u010c"+
    "\0\u010c\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0218"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0218\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u0218\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4"+
    "\0\u1427\0\u0218\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u0218\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u0218"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u010c\0\u010c\0\u228c\0\u22cf\0\u2312\0\u2355"+
    "\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d"+
    "\0\u0218\0\u25b0\0\u0218\0\u25f3\0\u2636\0\u0218\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u0218\0\u295a"+
    "\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2bb5\0\u0218\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u0218\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u0218\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309"+
    "\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521"+
    "\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739"+
    "\0\u377c\0\u0218\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u0b84\0\u39d7\0\u3a1a\0\u3a5d\0\u0218\0\u3aa0"+
    "\0\u3ae3\0\u3b26\0\u0218\0\u3b69\0\u3bac\0\u0218\0\u3bef\0\u3c32"+
    "\0\u3c75\0\u0218\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u0218\0\u3f13\0\u3f56\0\u0218\0\u3f99"+
    "\0\u3fdc\0\u401f\0\u0218\0\u4062\0\u40a5\0\u40e8\0\u0218\0\u412b"+
    "\0\u416e\0\u0218\0\u0218\0\u41b1\0\u0218\0\u41f4\0\u4237\0\u427a"+
    "\0\u42bd\0\u0218\0\u0218\0\u4300\0\u0218\0\u4343\0\u4386\0\u43c9"+
    "\0\u440c\0\u0218\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e"+
    "\0\u0218\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773"+
    "\0\u0218\0\u0218\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u0218\0\u48c2"+
    "\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u0218\0\u0218"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u0218\0\u0218\0\u4b60\0\u4ba3\0\u4be6"+
    "\0\u4c29\0\u4c6c\0\u0218\0\u0218\0\u4caf\0\u4cf2\0\u4d35\0\u0218"+
    "\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u0218\0\u4e84\0\u4ec7\0\u4f0a"+
    "\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c\0\u50df\0\u5122"+
    "\0\u5165\0\u51a8\0\u0218\0\u51eb\0\u0218\0\u0218\0\u0218\0\u0218"+
    "\0\u522e\0\u5271\0\u52b4\0\u0218\0\u0218\0\u52f7\0\u533a\0\u537d"+
    "\0\u53c0\0\u5403\0\u0218\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552"+
    "\0\u5595\0\u0218\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u0218"+
    "\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u0218\0\u5a4b\0\u5a8e\0\u5ad1"+
    "\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u0218\0\u5c20\0\u0218\0\u5c63"+
    "\0\u5ca6\0\u5ce9\0\u5d2c\0\u5d6f\0\u5db2\0\u0218\0\u5df5\0\u0218"+
    "\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44\0\u5f87\0\u0218\0\u0218"+
    "\0\u5fca\0\u0218\0\u600d\0\u6050\0\u6093\0\u0218\0\u60d6\0\u6119"+
    "\0\u615c\0\u619f\0\u61e2\0\u0218\0\u6225\0\u6268\0\u62ab\0\u62ee"+
    "\0\u6331\0\u6374\0\u0218\0\u63b7\0\u63fa\0\u643d\0\u0218\0\u6480"+
    "\0\u64c3\0\u0218\0\u6506\0\u0218\0\u0218\0\u0218\0\u6549\0\u0218"+
    "\0\u658c\0\u65cf\0\u6612\0\u0218\0\u6655\0\u6698\0\u66db\0\u671e"+
    "\0\u6761\0\u67a4\0\u67e7\0\u0218\0\u682a\0\u686d\0\u68b0\0\u68f3"+
    "\0\u6936\0\u6979\0\u0218\0\u69bc\0\u0218\0\u0218\0\u0218\0\u69ff"+
    "\0\u6a42\0\u6a85\0\u0218\0\u0218\0\u0218\0\u6ac8\0\u6b0b\0\u0218"+
    "\0\u0218\0\u0218\0\u6b4e\0\u6b91\0\u6bd4\0\u0218\0\u0218\0\u0218"+
    "\0\u0218\0\u6c17\0\u6c5a\0\u010c\0\u010c\0\u6c9d\0\u0218\0\u0218"+
    "\0\u0218\0\u6ce0\0\u0218\0\u0218\0\u0218\0\u0218\0\u6d23\0\u6d66"+
    "\0\u0218\0\u6da9\0\u6dec\0\u0218\0\u6e2f\0\u6e72\0\u6eb5\0\u6ef8"+
    "\0\u0218\0\u0218\0\u0218\0\u6f3b\0\u6f7e\0\u6fc1\0\u0218\0\u0218"+
    "\0\u7004\0\u0218\0\u0218\0\u7047\0\u0218\0\u0218\0\u708a\0\u70cd"+
    "\0\u7110\0\u7153\0\u0218\0\u0218\0\u7196\0\u71d9\0\u721c\0\u725f"+
    "\0\u0218\0\u0218\0\u72a2\0\u0218\0\u72e5\0\u7328\0\u736b\0\u73ae"+
    "\0\u73f1\0\u7434\0\u7477\0\u0218";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\2\12"+
    "\1\13\1\14\2\12\1\15\1\16\1\17\1\20\1\21"+
    "\2\12\1\22\2\12\1\23\2\12\1\24\1\25\1\26"+
    "\1\27\1\12\1\30\1\31\1\32\3\12\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\12\1\47\1\50\1\51\1\12\1\52"+
    "\1\53\1\54\4\12\1\55\1\56\1\57\1\60\5\0"+
    "\1\61\1\62\1\0\1\62\2\63\1\64\6\63\1\65"+
    "\12\63\3\62\1\63\1\62\35\63\6\0\1\4\2\5"+
    "\1\66\1\67\1\0\2\67\1\0\1\66\57\67\1\0"+
    "\3\67\2\0\1\70\1\0\1\71\2\0\1\5\207\0"+
    "\2\7\1\0\1\7\2\0\1\7\20\0\1\72\3\7"+
    "\1\0\1\7\46\0\2\7\1\0\1\7\2\0\1\7"+
    "\21\0\3\7\1\0\1\7\46\0\2\7\1\0\1\7"+
    "\2\0\1\7\1\0\1\73\17\0\3\7\1\0\1\7"+
    "\52\0\2\12\1\0\21\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\1\12\1\74\6\12\1\75\1\76"+
    "\7\12\3\0\1\77\1\0\1\100\1\12\1\101\1\102"+
    "\21\12\1\103\7\12\15\0\2\12\1\0\11\12\1\104"+
    "\7\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\5\12\1\105\13\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\3\12\1\106\15\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\1\12\1\107\2\12\1\110"+
    "\1\111\2\12\1\112\1\12\1\113\6\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\10\12\1\114\10\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\20\12"+
    "\1\115\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\16\12\1\116\2\12\3\0\1\12\1\0\2\12\1\117"+
    "\30\12\1\120\1\121\15\0\2\12\1\0\21\12\3\0"+
    "\1\122\1\0\35\12\11\0\2\7\1\0\1\7\2\0"+
    "\1\7\16\0\1\123\2\0\3\7\1\0\1\7\46\0"+
    "\2\7\1\0\1\7\2\0\1\7\3\0\1\124\15\0"+
    "\3\7\1\0\1\7\11\0\1\125\34\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\1\126\17\0\3\7\1\0"+
    "\1\7\46\0\2\7\1\0\1\7\2\0\1\7\1\0"+
    "\1\127\17\0\3\7\1\0\1\7\52\0\2\12\1\0"+
    "\2\12\1\130\1\131\2\12\1\132\1\12\1\133\1\134"+
    "\1\12\1\135\5\12\3\0\1\136\1\0\21\12\1\137"+
    "\13\12\15\0\2\12\1\0\21\12\3\0\1\140\1\0"+
    "\2\12\1\141\32\12\15\0\2\12\1\0\2\12\1\142"+
    "\1\12\1\143\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\2\12\1\144\1\12\1\145\4\12\1\146"+
    "\7\12\3\0\1\12\1\0\2\12\1\147\2\12\1\150"+
    "\27\12\15\0\2\12\1\0\2\12\1\151\1\12\1\152"+
    "\3\12\1\153\1\154\7\12\3\0\1\12\1\0\1\155"+
    "\1\12\1\156\13\12\1\157\16\12\15\0\2\12\1\0"+
    "\2\12\1\160\16\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\4\12\1\161\14\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\13\12\1\162\5\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\3\12\1\163"+
    "\1\164\3\12\1\165\1\166\1\12\1\167\5\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\21\12\1\170\13\12\15\0\2\12\1\0"+
    "\16\12\1\171\2\12\3\0\1\12\1\0\2\12\1\172"+
    "\32\12\15\0\2\12\1\0\2\12\1\173\1\174\1\175"+
    "\6\12\1\176\5\12\3\0\1\12\1\0\2\12\1\177"+
    "\32\12\15\0\2\12\1\0\4\12\1\200\3\12\1\201"+
    "\1\202\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\10\12\1\203\10\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\4\12\1\204\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\2\12\1\205\10\12"+
    "\1\206\5\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\207\17\12\1\210\3\0\1\12\1\0\2\12"+
    "\1\211\22\12\1\212\7\12\15\0\2\12\1\0\2\12"+
    "\1\213\1\12\1\214\14\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\13\12\1\215\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\4\12\1\216\14\12"+
    "\3\0\1\12\1\0\35\12\11\0\2\217\1\0\1\217"+
    "\2\0\1\217\21\0\3\217\1\0\1\217\46\0\2\62"+
    "\1\0\1\62\2\0\1\62\21\0\3\62\1\0\1\62"+
    "\52\0\2\63\1\0\21\63\3\0\1\63\1\0\35\63"+
    "\11\0\2\220\1\0\1\220\2\0\1\220\21\0\3\220"+
    "\1\0\1\220\52\0\2\63\1\0\5\63\1\221\13\63"+
    "\3\0\1\63\1\0\35\63\11\0\2\222\1\0\1\222"+
    "\1\67\1\0\1\222\21\67\3\222\1\67\1\222\31\67"+
    "\1\0\3\67\11\0\2\67\1\0\2\67\1\0\60\67"+
    "\1\0\3\67\21\0\1\223\125\0\1\224\53\0\2\12"+
    "\1\0\2\12\1\225\6\12\1\226\7\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\11\12\1\227\2\12\1\230\20\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\3\12\1\231\31\12"+
    "\15\0\2\12\1\0\4\12\1\232\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\2\12\1\233\16\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\3\12"+
    "\1\234\15\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\13\12\1\235\5\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\11\12"+
    "\1\236\23\12\15\0\2\12\1\0\4\12\1\237\14\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\240\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\11\12\1\241\23\12\15\0\2\12"+
    "\1\0\5\12\1\242\13\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\1\12\1\243\17\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\11\12\1\244\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\2\12"+
    "\1\245\16\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\17\12\1\246\1\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\14\12"+
    "\1\247\20\12\15\0\2\12\1\0\11\12\1\250\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\3\12\1\251\31\12\15\0\2\12"+
    "\1\0\4\12\1\252\14\12\3\0\1\12\1\0\35\12"+
    "\37\0\1\253\102\0\1\254\64\0\1\255\125\0\1\256"+
    "\102\0\1\257\53\0\2\12\1\0\10\12\1\260\10\12"+
    "\3\0\1\12\1\0\4\12\1\261\30\12\15\0\2\12"+
    "\1\0\2\12\1\262\16\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\3\12\1\263\15\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\2\12\1\264\16\12"+
    "\3\0\1\12\1\0\3\12\1\265\31\12\15\0\2\12"+
    "\1\0\14\12\1\266\4\12\3\0\1\12\1\0\11\12"+
    "\1\267\23\12\15\0\2\12\1\0\3\12\1\270\15\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\11\12\1\271\23\12\15\0\2\12"+
    "\1\0\2\12\1\272\16\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\4\12\1\273\4\12\1\274\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\16\12"+
    "\1\275\2\12\3\0\1\12\1\0\21\12\1\276\13\12"+
    "\15\0\2\12\1\0\4\12\1\277\13\12\1\300\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\301"+
    "\1\302\1\303\3\0\1\12\1\0\2\12\1\304\1\305"+
    "\31\12\15\0\2\12\1\0\10\12\1\306\10\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\2\12\1\307\32\12\15\0\2\12\1\0"+
    "\4\12\1\310\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\27\12\1\311"+
    "\5\12\15\0\2\12\1\0\1\12\1\312\16\12\1\313"+
    "\3\0\1\12\1\0\2\12\1\314\32\12\15\0\2\12"+
    "\1\0\20\12\1\315\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\1\12\1\316\14\12\1\317\2\12\3\0"+
    "\1\12\1\0\2\12\1\320\32\12\15\0\2\12\1\0"+
    "\3\12\1\321\15\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\1\322\20\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\2\12\1\323\16\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\13\12\1\324\5\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\20\12"+
    "\1\325\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\4\12\1\326\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\13\12\1\327\5\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\10\12\1\330\10\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\331"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\5\12\1\332\13\12\3\0\1\12\1\0\2\12\1\333"+
    "\32\12\15\0\2\12\1\0\20\12\1\334\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\20\12\1\335\3\0"+
    "\1\12\1\0\14\12\1\336\20\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\2\12\1\337\32\12\15\0"+
    "\2\12\1\0\17\12\1\340\1\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\4\12\1\237\4\12\1\341"+
    "\7\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\10\12\1\342\10\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\3\12\1\343\12\12\1\344\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\2\12\1\345"+
    "\1\12\1\346\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\2\12\1\347"+
    "\32\12\15\0\2\12\1\0\16\12\1\350\2\12\3\0"+
    "\1\12\1\0\2\12\1\351\32\12\15\0\2\12\1\0"+
    "\12\12\1\352\6\12\3\0\1\12\1\0\10\12\1\353"+
    "\1\354\2\12\1\355\20\12\15\0\2\12\1\0\14\12"+
    "\1\356\4\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\4\12\1\357\14\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\17\12\1\360\1\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\20\12\1\361\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\1\362\34\12\15\0\2\12\1\0\20\12"+
    "\1\363\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\2\12\1\364\32\12\15\0"+
    "\2\12\1\0\2\12\1\365\16\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\14\12\1\366\4\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\2\12\1\367"+
    "\16\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\3\12\1\370\31\12\15\0"+
    "\2\12\1\0\16\12\1\371\2\12\3\0\1\12\1\0"+
    "\35\12\11\0\2\62\1\372\1\62\2\0\1\62\21\0"+
    "\3\62\1\0\1\62\50\0\1\372\104\0\2\63\1\0"+
    "\5\63\1\373\13\63\3\0\1\63\1\0\35\63\11\0"+
    "\2\67\1\374\2\67\1\0\60\67\1\0\3\67\15\0"+
    "\2\12\1\0\3\12\1\375\15\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\2\12\1\376\16\12\3\0"+
    "\1\12\1\0\11\12\1\377\23\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\11\12\1\u0100\23\12\15\0"+
    "\2\12\1\0\20\12\1\u0101\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\4\12\1\u0102\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\1\12\1\u0103\1\12"+
    "\1\u0104\1\u0105\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\14\12\1\u0106\4\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u0107\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u0108"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\2\12\1\u0109\32\12\15\0"+
    "\2\12\1\0\14\12\1\u010a\4\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u010b\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\11\12\1\u010c"+
    "\1\12\1\u010d\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\3\12\1\u010e\15\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\3\12\1\u010f\15\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\4\12\1\u0110"+
    "\14\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\3\12\1\u0111\31\12\15\0"+
    "\2\12\1\0\11\12\1\u0112\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\1\12\1\u0103\17\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u0113"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\11\12\1\u0114\7\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\12\12\1\u0115\6\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\16\12\1\u0116\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\14\12\1\u0117"+
    "\4\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\u0118\1\0\35\12\15\0\2\12\1\0"+
    "\11\12\1\u0119\7\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\4\12\1\u011a\14\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u011b\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\3\12\1\u011c"+
    "\15\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\3\12\1\u011d\31\12\15\0"+
    "\2\12\1\0\2\12\1\u011e\16\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u011f\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\10\12\1\u0120"+
    "\10\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\20\12\1\u0121\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\12\1\u0122\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\4\12"+
    "\1\u0123\30\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\4\12\1\u0124\30\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\2\12\1\u0125\32\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\4\12\1\u0126\30\12"+
    "\15\0\2\12\1\0\16\12\1\u0127\2\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\4\12\1\u0128\14\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\3\12\1\u0129\31\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\u012a\1\0\35\12\15\0\2\12"+
    "\1\0\20\12\1\u012b\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\14\12\1\u012c\4\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\20\12\1\u012d\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\14\12\1\u012e\20\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\3\12\1\u012f\31\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\2\12\1\u0130\32\12"+
    "\15\0\2\12\1\0\20\12\1\u0131\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\21\12\1\u0132\13\12\15\0\2\12\1\0\16\12\1\u0133"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\20\12\1\u0134\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\2\12\1\u0135\32\12"+
    "\15\0\2\12\1\0\12\12\1\u0136\6\12\3\0\1\12"+
    "\1\0\14\12\1\u0137\20\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\14\12\1\u0138\20\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\4\12\1\u0139\30\12"+
    "\15\0\2\12\1\0\11\12\1\u013a\7\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\2\12\1\u013b\16\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\3\12\1\u013c\31\12\15\0\2\12"+
    "\1\0\1\12\1\u013d\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\4\12\1\u013e\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\11\12\1\u013f\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\11\12"+
    "\1\u0140\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\11\12\1\u0141\7\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\2\12"+
    "\1\u0142\32\12\15\0\2\12\1\0\20\12\1\u0143\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\10\12\1\u0144\24\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\10\12\1\u0145\24\12\15\0"+
    "\2\12\1\0\2\12\1\u0146\16\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\2\12\1\u0147\32\12\15\0\2\12\1\0\16\12\1\u0148"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\13\12\1\u0149\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\11\12\1\u014a\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\10\12\1\u014b\10\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\2\12\1\u014c\32\12\15\0\2\12\1\0"+
    "\4\12\1\u014d\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\11\12\1\u014e"+
    "\23\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\4\12\1\u014f\30\12\15\0\2\12\1\0\11\12\1\u0150"+
    "\7\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\20\12\1\u0151\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\13\12\1\u0152\5\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\11\12\1\u0153\7\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\21\12\1\u0154\13\12\15\0\2\12\1\0\11\12"+
    "\1\u0155\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\2\12\1\u0156\32\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\4\12"+
    "\1\u0157\30\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\31\12\1\u0158\3\12\11\0\1\u0159\2\0\1\u0159"+
    "\2\0\1\u0159\21\0\3\u0159\50\0\1\u015a\2\0\1\u015a"+
    "\2\0\1\u015a\21\0\3\u015a\54\0\2\12\1\0\1\12"+
    "\1\u015b\17\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\2\12\1\u015c\32\12"+
    "\15\0\2\12\1\0\4\12\1\u015d\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\1\12\1\u015e\17\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\16\12"+
    "\1\u015f\2\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\12\1\u0160\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\1\12\1\u0161\17\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\11\12\1\u0162\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\10\12\1\u0163\24\12\15\0\2\12"+
    "\1\0\2\12\1\u0164\16\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\3\12\1\u0165\15\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\16\12\1\u0166\2\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\3\12\1\u0167\31\12\15\0\2\12"+
    "\1\0\1\12\1\u0168\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\1\12\1\u0169\17\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\25\12\1\u016a\7\12\15\0\2\12\1\0\1\12"+
    "\1\u016b\17\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\20\12\1\u016c\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\1\12\1\u016d\17\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u016e\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\2\12\1\u016f"+
    "\1\12\1\u0170\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\16\12\1\u0171\2\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\4\12\1\u0172\14\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\25\12\1\u0173\7\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\10\12\1\u0174\24\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\4\12\1\u0175"+
    "\30\12\15\0\2\12\1\0\3\12\1\u0176\15\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\11\12\1\u0177\23\12\15\0\2\12\1\0"+
    "\11\12\1\u0178\7\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\11\12\1\u0179\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\3\12\1\u017a\31\12\15\0\2\12\1\0\17\12\1\u017b"+
    "\1\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\25\12\1\u017c\7\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\4\12\1\u017d"+
    "\30\12\15\0\2\12\1\0\13\12\1\u017e\5\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\2\12\1\u017f"+
    "\16\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\u0180\1\0\35\12\15\0\2\12\1\0"+
    "\10\12\1\u0181\10\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\4\12\1\u0182\14\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\20\12\1\u0183\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\11\12\1\u0184\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\2\12"+
    "\1\u0185\16\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\13\12\1\u0186\5\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\14\12"+
    "\1\u0187\20\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\2\12\1\u0188\32\12\15\0\2\12\1\0\16\12"+
    "\1\u0189\2\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\21\12\1\u018a\13\12"+
    "\15\0\2\12\1\0\4\12\1\u018b\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\2\12\1\u018c\16\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\10\12"+
    "\1\u018d\10\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\10\12\1\u018e\24\12"+
    "\15\0\2\12\1\0\2\12\1\u018f\16\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\1\12\1\u0190\17\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\11\12"+
    "\1\u0191\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\3\12\1\u0192\15\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\1\12\1\u0193\17\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\13\12\1\u0194\5\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\16\12"+
    "\1\u0195\2\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\3\12\1\u0196\15\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\2\12"+
    "\1\u0197\32\12\15\0\2\12\1\0\2\12\1\u0198\16\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\10\12"+
    "\1\u0199\10\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\11\12\1\u019a\7\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\11\12\1\u019b\7\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\20\12\1\u019c\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\21\12\1\u019d\13\12\15\0\2\12\1\0"+
    "\1\12\1\u019e\17\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\11\12\1\u019f\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\32\12\1\u01a0\2\12\11\0\2\u01a1\1\0\1\u01a1\2\0"+
    "\1\u01a1\21\0\3\u01a1\1\0\1\u01a1\46\0\2\u01a2\1\0"+
    "\1\u01a2\2\0\1\u01a2\21\0\3\u01a2\1\0\1\u01a2\52\0"+
    "\2\12\1\0\3\12\1\u01a3\15\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\13\12\1\u01a4\5\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\17\12\1\u01a5"+
    "\1\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\13\12\1\u01a6\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\16\12\1\u01a7\2\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\13\12\1\u01a8\5\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\3\12\1\u01a9\31\12\15\0\2\12\1\0"+
    "\20\12\1\u01aa\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\13\12\1\u01ab\5\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\13\12\1\u01ac\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\11\12\1\u01ad\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\20\12"+
    "\1\u01ae\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\13\12\1\u01af\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\20\12\1\u01b0\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\13\12\1\u01b1\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\2\12\1\u01b2\32\12\15\0\2\12\1\0\3\12"+
    "\1\u01b3\15\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\12\12\1\u01b4\6\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\13\12\1\u01b5\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\10\12\1\u01b6\10\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\11\12"+
    "\1\u01b7\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\12\1\u01b8\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\4\12\1\u01b9\14\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\20\12\1\u01ba\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u01bb"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\3\12\1\u01bc\31\12\15\0"+
    "\2\12\1\0\11\12\1\u01bd\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\11\12\1\u01be\23\12\15\0\2\12\1\0\16\12\1\u01bf"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\20\12\1\u01c0\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\12\1\u01c1\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\16\12\1\u01c2\2\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\2\12\1\u01c3\32\12\15\0\2\12\1\0\11\12"+
    "\1\u01c4\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\20\12\1\u01c5\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\16\12\1\u01c6\2\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\16\12\1\u01c7\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u01c8"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\2\12\1\u01c9\16\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\25\12\1\u01ca"+
    "\7\12\15\0\2\12\1\0\3\12\1\u01cb\15\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\2\12\1\u01cc"+
    "\16\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\13\12\1\u01cd\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\16\12\1\u01ce\2\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\10\12\1\u01cf\24\12\15\0\2\12\1\0\20\12\1\u01d0"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\2\12"+
    "\1\u01d1\16\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\21\12\3\0\1\12\1\0\21\12\1\u01d2\13\12"+
    "\15\0\2\12\1\0\16\12\1\u01d3\2\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\3\12\1\u01d4\15\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\17\12"+
    "\1\u01d5\1\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\1\12\1\u01d6\17\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\11\12\1\u01d7\7\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\17\12\1\u01d8\1\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\16\12"+
    "\1\u01d9\2\12\3\0\1\12\1\0\35\12\5\0\2\u01da"+
    "\1\0\100\u01da\2\u01db\1\0\100\u01db\10\0\2\12\1\0"+
    "\1\12\1\u01dc\17\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\1\12\1\u01dd\17\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\16\12\1\u01de\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u01df"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\11\12\1\u01e0\7\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\13\12\1\u01e1\5\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\2\12\1\u01e2\16\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\14\12\1\u01e3"+
    "\4\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\3\12\1\u01e4\15\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\4\12\1\u01e5\14\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\16\12\1\u01e6\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\13\12\1\u01e7"+
    "\5\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\4\12\1\u01e8\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\11\12\1\u01e9\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\3\12\1\u01ea\31\12\15\0\2\12\1\0\1\12\1\u01eb"+
    "\17\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\10\12\1\u01ec\10\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\10\12\1\u01ed"+
    "\24\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\4\12\1\u01ee\30\12\15\0\2\12\1\0\17\12\1\u01ef"+
    "\1\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\2\12\1\u01f0\16\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\20\12\1\u01f1\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\13\12\1\u01f2\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\21\12\3\0\1\12"+
    "\1\0\10\12\1\u01f3\24\12\15\0\2\12\1\0\11\12"+
    "\1\u01f4\7\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\11\12\1\u01f5\1\12\1\u01f6\5\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\1\12\1\u01f7\17\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\1\12"+
    "\1\u01f8\17\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\17\12\1\u01f9\1\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\2\12"+
    "\1\u01fa\32\12\15\0\2\12\1\0\2\12\1\u01fb\16\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\16\12"+
    "\1\u01fc\2\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\16\12\1\u01fd\2\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\10\12"+
    "\1\u01fe\24\12\15\0\2\12\1\0\11\12\1\u01ff\7\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\3\12"+
    "\1\u0200\15\12\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\17\12\1\u0201\1\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\16\12\1\u0202\2\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\20\12\1\u0203\3\0"+
    "\1\12\1\0\35\12\11\0\2\u0204\1\0\1\u0204\2\0"+
    "\1\u0204\21\0\3\u0204\1\0\1\u0204\46\0\2\u0205\1\0"+
    "\1\u0205\2\0\1\u0205\21\0\3\u0205\1\0\1\u0205\52\0"+
    "\2\12\1\0\10\12\1\u0206\10\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\10\12\1\u0207\24\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\10\12\1\u0208\24\12\15\0\2\12\1\0"+
    "\17\12\1\u0209\1\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\12\12\1\u020a\6\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\2\12\1\u020b\32\12\15\0\2\12\1\0\11\12\1\u020c"+
    "\7\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\16\12\1\u020d\2\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\10\12\1\u020e"+
    "\24\12\15\0\2\12\1\0\16\12\1\u020f\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\10\12\1\u0210"+
    "\10\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\3\12\1\u0211\15\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\2\12\1\u0212\16\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\3\12\1\u0213\15\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\2\12\1\u0214\32\12\15\0\2\12\1\0"+
    "\13\12\1\u0215\5\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\4\12\1\u0216\14\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\12\12\1\u0217\6\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\13\12\1\u0218"+
    "\5\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\21\12\1\u0219\13\12\15\0"+
    "\2\12\1\0\1\12\1\u021a\17\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\21\12\3\0\1\12\1\0"+
    "\10\12\1\u021b\24\12\15\0\2\12\1\0\17\12\1\u021c"+
    "\1\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\21\12\3\0\1\12\1\0\11\12\1\u021d\23\12\15\0"+
    "\2\12\1\0\1\12\1\u021e\17\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\11\12\1\u021f\7\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\21\12\3\0"+
    "\1\12\1\0\10\12\1\u0220\24\12\15\0\2\12\1\0"+
    "\16\12\1\u0221\2\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\2\12\1\u0222"+
    "\32\12\15\0\2\12\1\0\1\12\1\u0223\17\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\4\12\1\u0224"+
    "\14\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\16\12\1\u0225\2\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\11\12\1\u0226\7\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\16\12\1\u0227\2\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\13\12\1\u0228"+
    "\5\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\4\12\1\u0229\14\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\13\12\1\u022a\5\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\17\12\1\u022b\1\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u022c"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\10\12\1\u022d\10\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\16\12\1\u022e\2\12\3\0\1\12\1\0"+
    "\35\12\15\0\2\12\1\0\3\12\1\u022f\15\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\4\12\1\u0230"+
    "\14\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\11\12\1\u0231\7\12\3\0\1\12\1\0\35\12\15\0"+
    "\2\12\1\0\21\12\3\0\1\12\1\0\10\12\1\u0232"+
    "\24\12\15\0\2\12\1\0\1\12\1\u0233\17\12\3\0"+
    "\1\12\1\0\35\12\15\0\2\12\1\0\16\12\1\u0234"+
    "\2\12\3\0\1\12\1\0\35\12\15\0\2\12\1\0"+
    "\20\12\1\u0235\3\0\1\12\1\0\35\12\15\0\2\12"+
    "\1\0\14\12\1\u0236\4\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\2\12\1\u0237\16\12\3\0\1\12"+
    "\1\0\35\12\15\0\2\12\1\0\16\12\1\u0238\2\12"+
    "\3\0\1\12\1\0\35\12\15\0\2\12\1\0\21\12"+
    "\3\0\1\12\1\0\2\12\1\u0239\32\12\15\0\2\12"+
    "\1\0\13\12\1\u023a\5\12\3\0\1\12\1\0\35\12"+
    "\15\0\2\12\1\0\21\12\3\0\1\12\1\0\4\12"+
    "\1\u023b\30\12\15\0\2\12\1\0\11\12\1\u023c\7\12"+
    "\3\0\1\12\1\0\35\12\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\1\1\11\2\1\1\11\2\1\1\11\41\1\4\11"+
    "\7\1\2\11\2\0\27\1\5\0\70\1\1\0\2\1"+
    "\2\11\26\1\5\11\112\1\1\0\1\1\1\0\134\1"+
    "\2\0\177\1\2\0\50\1\2\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 97: 
          { return symbol(sym.KICKED_LITERAL);
          }
        case 138: break;
        case 16: 
          { return symbol(sym.VS_LITERAL);
          }
        case 139: break;
        case 116: 
          { return symbol(sym.REPLACED_LITERAL);
          }
        case 140: break;
        case 7: 
          { yybegin(LEFTPARENBRANCH); return symbol(sym.LEFT_PAREN);
          }
        case 141: break;
        case 38: 
          { yybegin(YYINITIAL); return symbol(sym.OFF);
          }
        case 142: break;
        case 28: 
          { return symbol(sym.THIRD);
          }
        case 143: break;
        case 99: 
          { return symbol(sym.QUARTER_LITERAL);
          }
        case 144: break;
        case 95: 
          { return symbol(sym.MISSED_LITERAL);
          }
        case 145: break;
        case 94: 
          { return symbol(sym.JUMPER_LITERAL);
          }
        case 146: break;
        case 35: 
          { return symbol(sym.PTS);
          }
        case 147: break;
        case 3: 
          { return symbol(sym.TEAM);
          }
        case 148: break;
        case 80: 
          { yybegin(TEAMIDENTIFIER); return symbol(sym.TIME);
          }
        case 149: break;
        case 75: 
          { return symbol(sym.BLOCK_LITERAL);
          }
        case 150: break;
        case 14: 
          { return symbol(sym.ST);
          }
        case 151: break;
        case 125: 
          { return symbol(sym.FLOATING_LITERAL);
          }
        case 152: break;
        case 77: 
          { return symbol(sym.DELAY_LITERAL);
          }
        case 153: break;
        case 30: 
          { return symbol(sym.FOURTH);
          }
        case 154: break;
        case 41: 
          { return symbol(sym.SLAM_LITERAL);
          }
        case 155: break;
        case 44: 
          { return symbol(sym.TEAM_LITERAL);
          }
        case 156: break;
        case 58: 
          { return symbol(sym.FOUL_LITERAL);
          }
        case 157: break;
        case 104: 
          { return symbol(sym.DRIVING_LITERAL);
          }
        case 158: break;
        case 93: 
          { return symbol(sym.REPLAY_LITERAL);
          }
        case 159: break;
        case 88: 
          { return symbol(sym.BOUNDS_LITERAL);
          }
        case 160: break;
        case 73: 
          { return symbol(sym.LOOSE_LITERAL);
          }
        case 161: break;
        case 122: 
          { return symbol(sym.PERSONAL_LITERAL);
          }
        case 162: break;
        case 12: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_PAREN);
          }
        case 163: break;
        case 8: 
          { yybegin(TEAMIDENTIFIER); return symbol(sym.LEFT_BRAC);
          }
        case 164: break;
        case 33: 
          { return symbol(sym.BAD_LITERAL);
          }
        case 165: break;
        case 134: 
          { return symbol(sym.DISCONTINUE_LITERAL);
          }
        case 166: break;
        case 66: 
          { return symbol(sym.STEAL_LITERAL);
          }
        case 167: break;
        case 101: 
          { return symbol(sym.PALMING_LITERAL);
          }
        case 168: break;
        case 22: 
          { return symbol(sym.FIFTH);
          }
        case 169: break;
        case 6: 
          { return symbol(sym.COLON);
          }
        case 170: break;
        case 15: 
          { return symbol(sym.OF_LITERAL);
          }
        case 171: break;
        case 118: 
          { return symbol(sym.OVERTIME_LITERAL);
          }
        case 172: break;
        case 115: 
          { return symbol(sym.SWINGING_LITERAL);
          }
        case 173: break;
        case 42: 
          { return symbol(sym.FROM_LITERAL);
          }
        case 174: break;
        case 32: 
          { return symbol(sym.TIP_LITERAL);
          }
        case 175: break;
        case 17: 
          { return symbol(sym.TO);
          }
        case 176: break;
        case 62: 
          { return symbol(sym.MADE_LITERAL);
          }
        case 177: break;
        case 107: 
          { return symbol(sym.INSTANT_LITERAL);
          }
        case 178: break;
        case 106: 
          { return symbol(sym.DEFENSE_LITERAL);
          }
        case 179: break;
        case 90: 
          { return symbol(sym.DOUBLE_LITERAL);
          }
        case 180: break;
        case 1: 
          { return symbol(sym.PLAYER_NAME);
          }
        case 181: break;
        case 50: 
          { return symbol(sym.BACK_LITERAL);
          }
        case 182: break;
        case 132: 
          { return symbol(sym.TURNAROUND_LITERAL);
          }
        case 183: break;
        case 82: 
          { return symbol(sym.SECOND_LITERAL);
          }
        case 184: break;
        case 121: 
          { return symbol(sym.TURNOVER_LITERAL);
          }
        case 185: break;
        case 78: 
          { return symbol(sym.FIRST_LITERAL);
          }
        case 186: break;
        case 36: 
          { return symbol(sym.DEF);
          }
        case 187: break;
        case 83: 
          { return symbol(sym.SCREEN_LITERAL);
          }
        case 188: break;
        case 79: 
          { return symbol(sym.ALLEY_LITERAL);
          }
        case 189: break;
        case 10: 
          { return symbol(sym.COMMA);
          }
        case 190: break;
        case 128: 
          { return symbol(sym.TECHNICAL_LITERAL);
          }
        case 191: break;
        case 85: 
          { return symbol(sym.EXCESS_LITERAL);
          }
        case 192: break;
        case 31: 
          { return symbol(sym.SIXTH);
          }
        case 193: break;
        case 108: 
          { return symbol(sym.INBOUND_LITERAL);
          }
        case 194: break;
        case 100: 
          { return symbol(sym.TIMEOUT_LITERAL);
          }
        case 195: break;
        case 18: 
          { return symbol(sym.PF);
          }
        case 196: break;
        case 54: 
          { return symbol(sym.PLAY_LITERAL);
          }
        case 197: break;
        case 110: 
          { return symbol(sym.RUNNING_LITERAL);
          }
        case 198: break;
        case 56: 
          { return symbol(sym.FADE_LITERAL);
          }
        case 199: break;
        case 64: 
          { return symbol(sym.GAME_LITERAL);
          }
        case 200: break;
        case 60: 
          { return symbol(sym.JUMP_LITERAL);
          }
        case 201: break;
        case 120: 
          { return symbol(sym.TAUNTING_LITERAL);
          }
        case 202: break;
        case 131: 
          { return symbol(sym.DEFENSIVE_LITERAL);
          }
        case 203: break;
        case 84: 
          { return symbol(sym.ELBOWS_LITERAL);
          }
        case 204: break;
        case 21: 
          { return symbol(sym.FIRST);
          }
        case 205: break;
        case 105: 
          { return symbol(sym.DRIBBLE_LITERAL);
          }
        case 206: break;
        case 26: 
          { return symbol(sym.END_LITERAL);
          }
        case 207: break;
        case 70: 
          { return symbol(sym.CLOCK_LITERAL);
          }
        case 208: break;
        case 124: 
          { return symbol(sym.FLAGRANT_LITERAL);
          }
        case 209: break;
        case 98: 
          { return symbol(sym.SUPPORT_LITERAL);
          }
        case 210: break;
        case 72: 
          { return symbol(sym.LAYUP_LITERAL);
          }
        case 211: break;
        case 20: 
          { return symbol(sym.NO_LITERAL);
          }
        case 212: break;
        case 136: 
          { return symbol(sym.SUBSTITUTION_LITERAL);
          }
        case 213: break;
        case 102: 
          { return symbol(sym.PUTBACK_LITERAL);
          }
        case 214: break;
        case 53: 
          { return symbol(sym.POSS_LITERAL);
          }
        case 215: break;
        case 13: 
          { yybegin(YYINITIAL); return symbol(sym.RIGHT_BRAC);
          }
        case 216: break;
        case 137: 
          { return symbol(sym.UNSPORTSMANLIKE);
          }
        case 217: break;
        case 113: 
          { return symbol(sym.REBOUND_LITERAL);
          }
        case 218: break;
        case 133: 
          { return symbol(sym.POSSESSION_LITERAL);
          }
        case 219: break;
        case 89: 
          { return symbol(sym.PULLUP_LITERAL);
          }
        case 220: break;
        case 40: 
          { return symbol(sym.SHOT_LITERAL);
          }
        case 221: break;
        case 24: 
          { return symbol(sym.OOP_LITERAL);
          }
        case 222: break;
        case 39: 
          { return symbol(sym.STEP_LITERAL);
          }
        case 223: break;
        case 67: 
          { return symbol(sym.SHORT_LITERAL);
          }
        case 224: break;
        case 19: 
          { return symbol(sym.BY_LITERAL);
          }
        case 225: break;
        case 91: 
          { return symbol(sym.FINGER_LITERAL);
          }
        case 226: break;
        case 25: 
          { return symbol(sym.OUT_LITERAL);
          }
        case 227: break;
        case 2: 
          { yybegin(YYINITIAL); return symbol(sym.PLAYER_NAME);
          }
        case 228: break;
        case 96: 
          { return symbol(sym.ASSIST_LITERAL);
          }
        case 229: break;
        case 74: 
          { return symbol(sym.BELOW_LITERAL);
          }
        case 230: break;
        case 63: 
          { return symbol(sym.AWAY_LITERAL);
          }
        case 231: break;
        case 43: 
          { return symbol(sym.TAKE_LITERAL);
          }
        case 232: break;
        case 68: 
          { return symbol(sym.OTHER_LITERAL);
          }
        case 233: break;
        case 47: 
          { return symbol(sym.LOST_LITERAL);
          }
        case 234: break;
        case 27: 
          { return symbol(sym.SECOND);
          }
        case 235: break;
        case 57: 
          { return symbol(sym.FREE_LITERAL);
          }
        case 236: break;
        case 51: 
          { return symbol(sym.PATH_LITERAL);
          }
        case 237: break;
        case 126: 
          { return symbol(sym.OFFENSIVE_LITERAL);
          }
        case 238: break;
        case 23: 
          { return symbol(sym.SEC_LITERAL);
          }
        case 239: break;
        case 65: 
          { return symbol(sym.START_LITERAL);
          }
        case 240: break;
        case 123: 
          { return symbol(sym.FADEAWAY_LITERAL);
          }
        case 241: break;
        case 34: 
          { return symbol(sym.BLK);
          }
        case 242: break;
        case 71: 
          { return symbol(sym.CLEAR_LITERAL);
          }
        case 243: break;
        case 114: 
          { return symbol(sym.SHOOTING_LITERAL);
          }
        case 244: break;
        case 112: 
          { return symbol(sym.REGULAR_LITERAL);
          }
        case 245: break;
        case 87: 
          { return symbol(sym.BASKET_LITERAL);
          }
        case 246: break;
        case 127: 
          { return symbol(sym.TRAVELING_LITERAL);
          }
        case 247: break;
        case 52: 
          { return symbol(sym.PASS_LITERAL);
          }
        case 248: break;
        case 59: 
          { return symbol(sym.ROLL_LITERAL);
          }
        case 249: break;
        case 45: 
          { return symbol(sym.TYPE_LITERAL);
          }
        case 250: break;
        case 49: 
          { return symbol(sym.BALL_LITERAL);
          }
        case 251: break;
        case 69: 
          { return symbol(sym.THROW_LITERAL);
          }
        case 252: break;
        case 5: 
          { return symbol(sym.NUMBER);
          }
        case 253: break;
        case 46: 
          { return symbol(sym.LANE_LITERAL);
          }
        case 254: break;
        case 92: 
          { return symbol(sym.RULING_LITERAL);
          }
        case 255: break;
        case 135: 
          { return symbol(sym.GOALTENDING_LITERAL);
          }
        case 256: break;
        case 37: 
          { return symbol(sym.AST);
          }
        case 257: break;
        case 119: 
          { return symbol(sym.EJECTION_LITERAL);
          }
        case 258: break;
        case 117: 
          { return symbol(sym.OFFICIAL_LITERAL);
          }
        case 259: break;
        case 111: 
          { return symbol(sym.REVERSE_LITERAL);
          }
        case 260: break;
        case 76: 
          { return symbol(sym.GAINS_LITERAL);
          }
        case 261: break;
        case 81: 
          { return symbol(sym.TIME);
          }
        case 262: break;
        case 48: 
          { return symbol(sym.BANK_LITERAL);
          }
        case 263: break;
        case 11: 
          { yybegin(YYINITIAL); return symbol(sym.NUMBER);
          }
        case 264: break;
        case 86: 
          { return symbol(sym.CHARGE_LITERAL);
          }
        case 265: break;
        case 55: 
          { return symbol(sym.DUNK_LITERAL);
          }
        case 266: break;
        case 9: 
          { return symbol(sym.RIGHT_PAREN);
          }
        case 267: break;
        case 129: 
          { return symbol(sym.BACKCOURT_LITERAL);
          }
        case 268: break;
        case 103: 
          { return symbol(sym.PUNCHED_LITERAL);
          }
        case 269: break;
        case 29: 
          { return symbol(sym.THREEPT_LITERAL);
          }
        case 270: break;
        case 109: 
          { return symbol(sym.ILLEGAL_LITERAL);
          }
        case 271: break;
        case 130: 
          { return symbol(sym.VIOLATION_LITERAL);
          }
        case 272: break;
        case 4: 
          { 
          }
        case 273: break;
        case 61: 
          { return symbol(sym.HOOK_LITERAL);
          }
        case 274: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
