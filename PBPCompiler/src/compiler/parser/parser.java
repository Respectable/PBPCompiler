
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 26 00:45:12 CDT 2013
//----------------------------------------------------

package compiler.parser;

import java_cup.runtime.*;
import java.util.ArrayList;
import nba.playActions.*;
import nba.*;
import nba.playActions.ejection.*;
import nba.playActions.foul.*;
import nba.playActions.freeThrow.*;
import nba.playActions.jumpBall.*;
import nba.playActions.shot.*;
import nba.playActions.technical.*;
import nba.playActions.turnover.*;
import nba.playActions.violation.*;
import nba.timeStamps.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 26 00:45:12 CDT 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\330\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\006\006\000\002\007\006\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\004\000\002\013\004\000\002\013\002" +
    "\000\002\014\004\000\002\014\004\000\002\071\004\000" +
    "\002\072\004\000\002\072\002\000\002\015\005\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\016\007\000\002\061\004\000\002\062\004\000" +
    "\002\062\002\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\002\000\002\021\010\000\002\022\007\000\002\065\007" +
    "\000\002\065\002\000\002\023\006\000\002\025\004\000" +
    "\002\025\003\000\002\025\004\000\002\025\003\000\002" +
    "\025\005\000\002\025\004\000\002\025\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\003\000\002\026\006\000" +
    "\002\024\013\000\002\027\005\000\002\030\003\000\002" +
    "\030\003\000\002\030\004\000\002\030\003\000\002\031" +
    "\006\000\002\032\007\000\002\032\007\000\002\032\007" +
    "\000\002\032\010\000\002\032\007\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\004\000\002" +
    "\034\010\000\002\034\007\000\002\034\005\000\002\034" +
    "\006\000\002\034\004\000\002\034\005\000\002\034\004" +
    "\000\002\034\003\000\002\034\004\000\002\034\005\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\034\005\000\002\034\005\000\002\034\004\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\036\006" +
    "\000\002\033\005\000\002\035\005\000\002\035\004\000" +
    "\002\035\005\000\002\035\003\000\002\035\004\000\002" +
    "\035\004\000\002\035\005\000\002\035\004\000\002\037" +
    "\011\000\002\037\002\000\002\040\006\000\002\070\003" +
    "\000\002\070\004\000\002\070\003\000\002\070\002\000" +
    "\002\041\006\000\002\041\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\006\000\002\044\005\000\002\045" +
    "\004\000\002\045\004\000\002\045\005\000\002\045\004" +
    "\000\002\045\005\000\002\045\005\000\002\045\004\000" +
    "\002\045\006\000\002\045\004\000\002\045\005\000\002" +
    "\045\007\000\002\045\003\000\002\045\005\000\002\045" +
    "\005\000\002\045\006\000\002\045\006\000\002\045\006" +
    "\000\002\045\006\000\002\045\005\000\002\045\005\000" +
    "\002\045\006\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\006\000\002\045\006\000\002\045" +
    "\004\000\002\045\005\000\002\045\005\000\002\045\005" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\045\005\000\002" +
    "\045\005\000\002\045\006\000\002\045\006\000\002\045" +
    "\006\000\002\045\005\000\002\045\006\000\002\045\007" +
    "\000\002\045\006\000\002\045\006\000\002\045\006\000" +
    "\002\045\005\000\002\045\005\000\002\045\006\000\002" +
    "\045\006\000\002\045\006\000\002\045\005\000\002\045" +
    "\005\000\002\045\005\000\002\045\005\000\002\046\005" +
    "\000\002\046\004\000\002\047\011\000\002\047\002\000" +
    "\002\050\011\000\002\050\002\000\002\051\013\000\002" +
    "\051\003\000\002\052\003\000\002\053\006\000\002\053" +
    "\007\000\002\057\005\000\002\063\004\000\002\063\003" +
    "\000\002\063\004\000\002\063\004\000\002\063\004\000" +
    "\002\060\007\000\002\060\005\000\002\064\005\000\002" +
    "\054\004\000\002\055\004\000\002\056\004\000\002\066" +
    "\005\000\002\067\004\000\002\067\003\000\002\067\004" +
    "\000\002\067\006\000\002\073\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ef\000\004\004\005\001\002\000\004\002\u01f1\001" +
    "\002\000\004\005\u01ee\001\002\000\004\203\014\001\002" +
    "\000\004\002\001\001\002\000\006\002\ufffd\004\005\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\ufffd\004\005" +
    "\001\002\000\004\002\ufffe\001\002\000\004\201\u01cf\001" +
    "\002\000\030\006\uffcb\010\u0186\014\u0191\024\u0192\040\u0190" +
    "\061\103\065\u018e\074\u0194\126\u0189\203\uffcb\207\u018c\001" +
    "\002\000\104\010\100\023\115\024\047\030\070\033\062" +
    "\036\053\037\060\040\051\043\041\044\064\045\114\046" +
    "\044\047\067\050\107\051\050\052\075\053\042\055\061" +
    "\061\103\063\063\070\054\074\055\105\045\107\106\112" +
    "\104\127\074\141\113\142\105\151\111\154\073\156\065" +
    "\160\071\166\072\001\002\000\006\006\uffef\203\014\001" +
    "\002\000\004\006\022\001\002\000\006\002\ufffc\004\ufffc" +
    "\001\002\000\004\005\023\001\002\000\016\171\032\172" +
    "\025\173\026\174\030\175\031\176\024\001\002\000\006" +
    "\167\ufff4\170\ufff4\001\002\000\006\167\ufff8\170\ufff8\001" +
    "\002\000\006\167\ufff7\170\ufff7\001\002\000\006\167\034" +
    "\170\033\001\002\000\006\167\ufff6\170\ufff6\001\002\000" +
    "\006\167\ufff5\170\ufff5\001\002\000\006\167\ufff9\170\ufff9" +
    "\001\002\000\010\002\ufff2\004\ufff2\203\ufff2\001\002\000" +
    "\010\002\ufff3\004\ufff3\203\ufff3\001\002\000\006\002\ufffa" +
    "\004\ufffa\001\002\000\004\006\ufff1\001\002\000\006\006" +
    "\uffef\203\014\001\002\000\004\006\ufff0\001\002\000\004" +
    "\011\u0185\001\002\000\006\011\u0184\206\uff72\001\002\000" +
    "\006\006\uffd6\203\uffd6\001\002\000\004\011\u0183\001\002" +
    "\000\004\106\u017e\001\002\000\006\006\uffd4\203\uffd4\001" +
    "\002\000\004\206\u0173\001\002\000\014\040\u016a\050\u0169" +
    "\054\u0166\107\u0168\160\u0167\001\002\000\010\011\u0160\050" +
    "\u0161\054\u015f\001\002\000\006\006\uffda\203\uffda\001\002" +
    "\000\004\011\u015e\001\002\000\004\071\u015b\001\002\000" +
    "\006\006\uff3e\203\uff3e\001\002\000\004\206\u0146\001\002" +
    "\000\006\006\uffd3\203\uffd3\001\002\000\024\040\u0131\043" +
    "\u0130\046\u0135\047\u0133\050\u012e\052\u012f\053\u0132\054\u0136" +
    "\055\u0134\001\002\000\004\053\u012c\001\002\000\004\206" +
    "\u0110\001\002\000\004\064\376\001\002\000\022\040\356" +
    "\043\354\047\350\050\355\052\353\053\351\054\352\055" +
    "\357\001\002\000\004\137\343\001\002\000\006\006\uffee" +
    "\203\uffee\001\002\000\010\043\335\053\334\055\336\001" +
    "\002\000\004\031\330\001\002\000\006\040\325\054\324" +
    "\001\002\000\004\014\320\001\002\000\004\155\314\001" +
    "\002\000\004\040\312\001\002\000\004\104\307\001\002" +
    "\000\006\006\uffd8\203\uffd8\001\002\000\006\006\uffdc\203" +
    "\uffdc\001\002\000\004\206\175\001\002\000\006\006\uffdd" +
    "\203\uffdd\001\002\000\006\006\uffd9\203\uffd9\001\002\000" +
    "\010\006\uff3f\202\165\203\uff3f\001\002\000\012\043\155" +
    "\047\153\053\154\055\156\001\002\000\004\206\140\001" +
    "\002\000\004\110\133\001\002\000\006\011\131\054\130" +
    "\001\002\000\006\006\uffd5\203\uffd5\001\002\000\004\074" +
    "\127\001\002\000\006\006\uffdb\203\uffdb\001\002\000\004" +
    "\074\126\001\002\000\006\040\123\054\122\001\002\000" +
    "\004\113\117\001\002\000\006\006\uffd7\203\uffd7\001\002" +
    "\000\004\040\120\001\002\000\004\011\121\001\002\000" +
    "\004\206\uff69\001\002\000\004\011\125\001\002\000\004" +
    "\011\124\001\002\000\004\206\uff78\001\002\000\004\206" +
    "\uff4e\001\002\000\006\006\uff31\203\uff31\001\002\000\006" +
    "\006\uff30\203\uff30\001\002\000\004\011\132\001\002\000" +
    "\004\206\uff75\001\002\000\004\206\uff71\001\002\000\006" +
    "\054\134\114\135\001\002\000\004\011\137\001\002\000" +
    "\004\011\136\001\002\000\004\206\uff6d\001\002\000\004" +
    "\206\uff56\001\002\000\012\073\141\147\144\152\143\153" +
    "\142\001\002\000\004\074\152\001\002\000\006\006\uff2d" +
    "\203\uff2d\001\002\000\004\142\151\001\002\000\004\144" +
    "\146\001\002\000\006\006\uff2f\203\uff2f\001\002\000\004" +
    "\145\147\001\002\000\004\207\150\001\002\000\006\006" +
    "\uff2b\203\uff2b\001\002\000\006\006\uff2c\203\uff2c\001\002" +
    "\000\006\006\uff2e\203\uff2e\001\002\000\004\053\163\001" +
    "\002\000\004\011\162\001\002\000\004\011\161\001\002" +
    "\000\004\053\157\001\002\000\004\011\160\001\002\000" +
    "\004\206\uff50\001\002\000\004\206\uff6b\001\002\000\004" +
    "\206\uff6a\001\002\000\004\011\164\001\002\000\004\206" +
    "\uff4b\001\002\000\004\122\166\001\002\000\004\206\167" +
    "\001\002\000\004\207\170\001\002\000\004\123\171\001" +
    "\002\000\004\206\172\001\002\000\004\207\173\001\002" +
    "\000\004\204\174\001\002\000\006\006\uff40\203\uff40\001" +
    "\002\000\050\013\216\015\177\017\210\020\204\021\206" +
    "\023\200\025\220\026\202\030\203\032\205\033\215\034" +
    "\211\040\212\126\221\130\217\131\213\143\214\152\201" +
    "\207\207\001\002\000\004\202\267\001\002\000\004\016" +
    "\265\001\002\000\004\021\261\001\002\000\004\010\260" +
    "\001\002\000\004\027\257\001\002\000\006\031\253\062" +
    "\254\001\002\000\004\010\252\001\002\000\004\010\251" +
    "\001\002\000\004\005\244\001\002\000\004\073\242\001" +
    "\002\000\004\202\uffa9\001\002\000\006\033\237\075\240" +
    "\001\002\000\004\014\235\001\002\000\004\014\233\001" +
    "\002\000\004\010\232\001\002\000\004\202\uffa0\001\002" +
    "\000\004\014\231\001\002\000\004\024\230\001\002\000" +
    "\004\013\225\001\002\000\006\027\222\077\223\001\002" +
    "\000\004\202\uff9d\001\002\000\004\010\224\001\002\000" +
    "\004\202\uff99\001\002\000\004\014\226\001\002\000\004" +
    "\010\227\001\002\000\004\202\uffa4\001\002\000\004\202" +
    "\uff9c\001\002\000\004\202\uffab\001\002\000\004\202\uff9b" +
    "\001\002\000\004\024\234\001\002\000\004\202\uff9a\001" +
    "\002\000\004\024\236\001\002\000\004\202\uff96\001\002" +
    "\000\004\010\241\001\002\000\004\202\uff9f\001\002\000" +
    "\004\202\uff9e\001\002\000\004\024\243\001\002\000\004" +
    "\202\uffa5\001\002\000\004\022\245\001\002\000\006\013" +
    "\246\202\uff95\001\002\000\004\014\247\001\002\000\004" +
    "\010\250\001\002\000\004\202\uffa7\001\002\000\004\202" +
    "\uffa1\001\002\000\004\202\uffa8\001\002\000\004\010\256" +
    "\001\002\000\004\010\255\001\002\000\004\202\uff97\001" +
    "\002\000\004\202\uffa2\001\002\000\004\202\uffa3\001\002" +
    "\000\004\202\uff98\001\002\000\004\005\262\001\002\000" +
    "\004\022\263\001\002\000\004\010\264\001\002\000\004" +
    "\202\uffa6\001\002\000\004\202\uffaa\001\002\000\010\006" +
    "\uff89\035\274\203\uff89\001\002\000\004\207\270\001\002" +
    "\000\004\115\271\001\002\000\004\204\272\001\002\000" +
    "\010\006\uff94\035\uff94\203\uff94\001\002\000\006\006\uffb0" +
    "\203\uffb0\001\002\000\004\206\275\001\002\000\004\177" +
    "\277\001\002\000\004\202\303\001\002\000\122\006\uffea" +
    "\010\uffea\023\uffea\024\uffea\030\uffea\033\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\055" +
    "\uffea\061\uffea\063\uffea\070\uffea\074\uffea\105\uffea\107\uffea" +
    "\112\uffea\125\uffea\127\uffea\141\uffea\142\uffea\151\uffea\154" +
    "\uffea\156\uffea\160\uffea\166\uffea\177\300\202\uffea\203\uffea" +
    "\001\002\000\122\006\uffea\010\uffea\023\uffea\024\uffea\030" +
    "\uffea\033\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\055\uffea\061\uffea\063\uffea\070\uffea" +
    "\074\uffea\105\uffea\107\uffea\112\uffea\125\uffea\127\uffea\141" +
    "\uffea\142\uffea\151\uffea\154\uffea\156\uffea\160\uffea\166\uffea" +
    "\177\300\202\uffea\203\uffea\001\002\000\120\006\uffec\010" +
    "\uffec\023\uffec\024\uffec\030\uffec\033\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053\uffec\055\uffec" +
    "\061\uffec\063\uffec\070\uffec\074\uffec\105\uffec\107\uffec\112" +
    "\uffec\125\uffec\127\uffec\141\uffec\142\uffec\151\uffec\154\uffec" +
    "\156\uffec\160\uffec\166\uffec\202\uffec\203\uffec\001\002\000" +
    "\120\006\uffeb\010\uffeb\023\uffeb\024\uffeb\030\uffeb\033\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\055\uffeb\061\uffeb\063\uffeb\070\uffeb\074\uffeb\105" +
    "\uffeb\107\uffeb\112\uffeb\125\uffeb\127\uffeb\141\uffeb\142\uffeb" +
    "\151\uffeb\154\uffeb\156\uffeb\160\uffeb\166\uffeb\202\uffeb\203" +
    "\uffeb\001\002\000\004\207\304\001\002\000\004\116\305" +
    "\001\002\000\004\204\306\001\002\000\006\006\uff8a\203" +
    "\uff8a\001\002\000\004\043\310\001\002\000\004\011\311" +
    "\001\002\000\004\206\uff65\001\002\000\004\011\313\001" +
    "\002\000\004\206\uff60\001\002\000\004\010\315\001\002" +
    "\000\004\206\316\001\002\000\004\202\267\001\002\000" +
    "\006\006\uffae\203\uffae\001\002\000\004\010\321\001\002" +
    "\000\004\206\322\001\002\000\004\202\267\001\002\000" +
    "\006\006\uffaf\203\uffaf\001\002\000\004\011\327\001\002" +
    "\000\004\011\326\001\002\000\004\206\uff49\001\002\000" +
    "\004\206\uff48\001\002\000\004\010\331\001\002\000\004" +
    "\206\332\001\002\000\004\202\267\001\002\000\006\006" +
    "\uffac\203\uffac\001\002\000\004\011\342\001\002\000\004" +
    "\011\341\001\002\000\004\053\337\001\002\000\004\011" +
    "\340\001\002\000\004\206\uff64\001\002\000\004\206\uff68" +
    "\001\002\000\004\206\uff47\001\002\000\004\157\344\001" +
    "\002\000\004\010\345\001\002\000\004\206\346\001\002" +
    "\000\004\202\267\001\002\000\006\006\uffad\203\uffad\001" +
    "\002\000\004\043\374\001\002\000\004\011\373\001\002" +
    "\000\006\011\370\050\371\001\002\000\004\104\365\001" +
    "\002\000\004\011\364\001\002\000\004\011\363\001\002" +
    "\000\004\011\362\001\002\000\004\053\360\001\002\000" +
    "\004\011\361\001\002\000\004\206\uff58\001\002\000\004" +
    "\206\uff5d\001\002\000\004\206\uff5b\001\002\000\004\206" +
    "\uff79\001\002\000\004\043\366\001\002\000\004\011\367" +
    "\001\002\000\004\206\uff73\001\002\000\004\206\uff5a\001" +
    "\002\000\004\011\372\001\002\000\004\206\uff4c\001\002" +
    "\000\004\206\uff62\001\002\000\004\011\375\001\002\000" +
    "\004\206\uff76\001\002\000\016\056\uff84\074\u0100\135\u0102" +
    "\144\377\202\uff84\207\uff84\001\002\000\010\056\uff87\202" +
    "\uff87\207\uff87\001\002\000\010\056\uff85\202\uff85\207\uff85" +
    "\001\002\000\010\056\u0104\202\u0105\207\u0106\001\002\000" +
    "\004\136\u0103\001\002\000\010\056\uff86\202\uff86\207\uff86" +
    "\001\002\000\006\006\uff81\203\uff81\001\002\000\004\207" +
    "\u010d\001\002\000\004\005\u010a\001\002\000\006\006\uff88" +
    "\203\uff88\001\002\000\006\006\uff80\203\uff80\001\002\000" +
    "\006\006\uff82\203\uff82\001\002\000\004\207\u010b\001\002" +
    "\000\006\056\u0104\202\u0105\001\002\000\006\006\uff83\203" +
    "\uff83\001\002\000\004\120\u010e\001\002\000\004\204\u010f" +
    "\001\002\000\010\006\uff7f\062\uff7f\203\uff7f\001\002\000" +
    "\024\034\u0114\076\u0112\077\u0113\101\u0118\103\u0119\110\u0111" +
    "\135\u0116\143\u011a\144\u0115\001\002\000\004\137\u012a\001" +
    "\002\000\004\014\u0129\001\002\000\010\060\u0128\134\u0127" +
    "\202\uffc4\001\002\000\006\100\u0126\202\uffbf\001\002\000" +
    "\004\145\u0124\001\002\000\004\136\u0123\001\002\000\004" +
    "\202\u011e\001\002\000\006\060\u011d\202\uffc2\001\002\000" +
    "\004\207\u011b\001\002\000\004\202\uffb9\001\002\000\004" +
    "\073\u011c\001\002\000\004\202\uffc1\001\002\000\004\202" +
    "\uffba\001\002\000\004\207\u0120\001\002\000\006\006\uffc6" +
    "\203\uffc6\001\002\000\004\117\u0121\001\002\000\004\204" +
    "\u0122\001\002\000\032\006\uffb8\010\uffb8\014\uffb8\024\uffb8" +
    "\040\uffb8\061\uffb8\065\uffb8\074\uffb8\125\uffb8\126\uffb8\203" +
    "\uffb8\207\uffb8\001\002\000\004\202\uffbd\001\002\000\004" +
    "\207\u0125\001\002\000\004\202\uffbb\001\002\000\004\202" +
    "\uffc3\001\002\000\004\202\uffbe\001\002\000\004\202\uffc0" +
    "\001\002\000\004\202\uffc5\001\002\000\004\140\u012b\001" +
    "\002\000\004\202\uffbc\001\002\000\004\011\u012d\001\002" +
    "\000\004\206\uff70\001\002\000\004\011\u0145\001\002\000" +
    "\004\104\u0142\001\002\000\004\011\u0141\001\002\000\004" +
    "\011\u0140\001\002\000\004\011\u013f\001\002\000\004\043" +
    "\u013d\001\002\000\004\053\u013b\001\002\000\004\011\u013a" +
    "\001\002\000\006\011\u0137\050\u0138\001\002\000\004\206" +
    "\uff5e\001\002\000\004\011\u0139\001\002\000\004\206\uff54" +
    "\001\002\000\004\206\uff4f\001\002\000\004\011\u013c\001" +
    "\002\000\004\206\uff52\001\002\000\004\011\u013e\001\002" +
    "\000\004\206\uff51\001\002\000\004\206\uff59\001\002\000" +
    "\004\206\uff7b\001\002\000\004\206\uff66\001\002\000\004" +
    "\043\u0143\001\002\000\004\011\u0144\001\002\000\004\206" +
    "\uff53\001\002\000\004\206\uff5c\001\002\000\006\056\u0148" +
    "\057\u0147\001\002\000\004\202\u0105\001\002\000\010\006" +
    "\uff41\060\u014b\203\uff41\001\002\000\006\006\uff7e\203\uff7e" +
    "\001\002\000\006\006\uff45\203\uff45\001\002\000\004\206" +
    "\u014c\001\002\000\004\177\277\001\002\000\004\202\u014e" +
    "\001\002\000\004\207\u014f\001\002\000\004\121\u0150\001" +
    "\002\000\004\204\u0151\001\002\000\006\006\uff42\203\uff42" +
    "\001\002\000\010\006\uff43\062\u0154\203\uff43\001\002\000" +
    "\006\006\uff46\203\uff46\001\002\000\004\206\u0155\001\002" +
    "\000\004\177\277\001\002\000\004\202\u0157\001\002\000" +
    "\004\207\u0158\001\002\000\004\124\u0159\001\002\000\004" +
    "\204\u015a\001\002\000\006\006\uff44\203\uff44\001\002\000" +
    "\004\072\u015c\001\002\000\004\177\277\001\002\000\006" +
    "\006\uffb1\203\uffb1\001\002\000\004\206\uff7d\001\002\000" +
    "\006\011\u0163\050\u0164\001\002\000\004\206\uff7c\001\002" +
    "\000\004\011\u0162\001\002\000\004\206\uff5f\001\002\000" +
    "\004\206\uff61\001\002\000\004\011\u0165\001\002\000\004" +
    "\206\uff57\001\002\000\006\011\u0170\050\u0171\001\002\000" +
    "\004\011\u016f\001\002\000\004\110\u016d\001\002\000\004" +
    "\011\u016c\001\002\000\004\011\u016b\001\002\000\004\206" +
    "\uff67\001\002\000\004\206\uff74\001\002\000\004\011\u016e" +
    "\001\002\000\004\206\uff6c\001\002\000\004\206\uff4a\001" +
    "\002\000\004\206\uff55\001\002\000\004\011\u0172\001\002" +
    "\000\004\206\uff4d\001\002\000\014\040\u0179\111\u0178\126" +
    "\u0174\130\u0175\131\u0176\001\002\000\004\130\u017d\001\002" +
    "\000\006\006\uff39\203\uff39\001\002\000\004\014\u017c\001" +
    "\002\000\006\006\uff3b\203\uff3b\001\002\000\004\075\u017b" +
    "\001\002\000\004\014\u017a\001\002\000\006\006\uff37\203" +
    "\uff37\001\002\000\006\006\uff3a\203\uff3a\001\002\000\006" +
    "\006\uff38\203\uff38\001\002\000\006\006\uff36\203\uff36\001" +
    "\002\000\006\043\u0180\053\u017f\001\002\000\004\011\u0182" +
    "\001\002\000\004\011\u0181\001\002\000\004\206\uff6e\001" +
    "\002\000\004\206\uff6f\001\002\000\004\206\uff77\001\002" +
    "\000\004\206\uff63\001\002\000\004\206\uff7a\001\002\000" +
    "\004\206\u01bb\001\002\000\006\006\uffed\203\uffed\001\002" +
    "\000\006\006\uffcd\203\uffcd\001\002\000\004\074\u01b7\001" +
    "\002\000\006\006\uffcf\203\uffcf\001\002\000\006\006\uffd0" +
    "\203\uffd0\001\002\000\004\146\u01b3\001\002\000\006\006" +
    "\uffd2\203\uffd2\001\002\000\004\206\u01ac\001\002\000\006" +
    "\006\uffcc\203\uffcc\001\002\000\004\014\u01a7\001\002\000" +
    "\004\177\277\001\002\000\004\206\u0199\001\002\000\006" +
    "\006\uffd1\203\uffd1\001\002\000\004\177\277\001\002\000" +
    "\006\006\uffce\203\uffce\001\002\000\004\125\u0197\001\002" +
    "\000\004\177\277\001\002\000\006\006\uff3d\203\uff3d\001" +
    "\002\000\004\132\u019a\001\002\000\004\005\u019c\001\002" +
    "\000\006\006\uff34\203\uff34\001\002\000\004\133\u019d\001" +
    "\002\000\006\006\uff33\203\uff33\001\002\000\004\041\u019f" +
    "\001\002\000\004\177\277\001\002\000\010\006\uffc7\202" +
    "\u01a1\203\uffc7\001\002\000\004\177\277\001\002\000\006" +
    "\006\uffc9\203\uffc9\001\002\000\004\042\u01a4\001\002\000" +
    "\004\102\u01a5\001\002\000\004\204\u01a6\001\002\000\006" +
    "\006\uffc8\203\uffc8\001\002\000\004\177\277\001\002\000" +
    "\004\041\u01a9\001\002\000\004\177\277\001\002\000\010" +
    "\006\uffc7\202\u01a1\203\uffc7\001\002\000\006\006\uffca\203" +
    "\uffca\001\002\000\012\066\u01b1\067\u01ae\150\u01ad\152\u01b0" +
    "\001\002\000\030\006\uffb2\010\uffb2\014\uffb2\024\uffb2\040" +
    "\uffb2\061\uffb2\065\uffb2\074\uffb2\126\uffb2\203\uffb2\207\uffb2" +
    "\001\002\000\030\006\uffb4\010\uffb4\014\uffb4\024\uffb4\040" +
    "\uffb4\061\uffb4\065\uffb4\074\uffb4\126\uffb4\203\uffb4\207\uffb4" +
    "\001\002\000\030\006\uffb6\010\uffb6\014\uffb6\024\uffb6\040" +
    "\uffb6\061\uffb6\065\uffb6\074\uffb6\126\uffb6\203\uffb6\207\uffb6" +
    "\001\002\000\004\065\u01b2\001\002\000\030\006\uffb5\010" +
    "\uffb5\014\uffb5\024\uffb5\040\uffb5\061\uffb5\065\uffb5\074\uffb5" +
    "\126\uffb5\203\uffb5\207\uffb5\001\002\000\030\006\uffb3\010" +
    "\uffb3\014\uffb3\024\uffb3\040\uffb3\061\uffb3\065\uffb3\074\uffb3" +
    "\126\uffb3\203\uffb3\207\uffb3\001\002\000\004\143\u01b4\001" +
    "\002\000\004\010\u01b5\001\002\000\004\206\u01b6\001\002" +
    "\000\006\006\uff35\203\uff35\001\002\000\004\177\277\001" +
    "\002\000\004\125\u01b9\001\002\000\004\177\277\001\002" +
    "\000\006\006\uff3c\203\uff3c\001\002\000\022\011\u01c2\013" +
    "\u01bd\015\u01bc\017\u01c1\032\u01c4\143\u01c3\161\u01be\207\u01bf" +
    "\001\002\000\004\016\u01ce\001\002\000\004\014\u01cd\001" +
    "\002\000\004\065\u01cb\001\002\000\004\073\u01c9\001\002" +
    "\000\006\006\uff93\203\uff93\001\002\000\006\006\uff8f\203" +
    "\uff8f\001\002\000\004\012\u01c7\001\002\000\004\010\u01c6" +
    "\001\002\000\004\010\u01c5\001\002\000\006\006\uff8b\203" +
    "\uff8b\001\002\000\006\006\uff8e\203\uff8e\001\002\000\004" +
    "\010\u01c8\001\002\000\006\006\uff92\203\uff92\001\002\000" +
    "\004\024\u01ca\001\002\000\006\006\uff90\203\uff90\001\002" +
    "\000\004\010\u01cc\001\002\000\006\006\uff8c\203\uff8c\001" +
    "\002\000\006\006\uff8d\203\uff8d\001\002\000\006\006\uff91" +
    "\203\uff91\001\002\000\006\200\u01d2\205\u01d1\001\002\000" +
    "\004\205\u01d6\001\002\000\030\006\uffe9\010\uffe9\014\uffe9" +
    "\024\uffe9\040\uffe9\061\uffe9\065\uffe9\074\uffe9\126\uffe9\203" +
    "\uffe9\207\uffe9\001\002\000\006\200\u01d4\205\uffde\001\002" +
    "\000\004\205\uffe0\001\002\000\006\200\u01d4\205\uffde\001" +
    "\002\000\004\205\uffdf\001\002\000\022\007\u01dd\033\u01d7" +
    "\040\u01de\065\u018e\126\u01d8\132\u01dc\162\u01e0\177\277\001" +
    "\002\000\004\206\u01e6\001\002\000\030\006\uffe7\010\uffe7" +
    "\014\uffe7\024\uffe7\040\uffe7\061\uffe7\065\uffe7\074\uffe7\126" +
    "\uffe7\203\uffe7\207\uffe7\001\002\000\030\006\uffe4\010\uffe4" +
    "\014\uffe4\024\uffe4\040\uffe4\061\uffe4\065\uffe4\074\uffe4\126" +
    "\uffe4\203\uffe4\207\uffe4\001\002\000\030\006\uffe2\010\uffe2" +
    "\014\uffe2\024\uffe2\040\uffe2\061\uffe2\065\uffe2\074\uffe2\126" +
    "\uffe2\203\uffe2\207\uffe2\001\002\000\030\006\uffe5\010\uffe5" +
    "\014\uffe5\024\uffe5\040\uffe5\061\uffe5\065\uffe5\074\uffe5\126" +
    "\uffe5\203\uffe5\207\uffe5\001\002\000\004\074\u01e5\001\002" +
    "\000\030\006\uffe8\010\uffe8\014\uffe8\024\uffe8\040\uffe8\061" +
    "\uffe8\065\uffe8\074\uffe8\126\uffe8\203\uffe8\207\uffe8\001\002" +
    "\000\030\006\uffe6\010\uffe6\014\uffe6\024\uffe6\040\uffe6\061" +
    "\uffe6\065\uffe6\074\uffe6\126\uffe6\203\uffe6\207\uffe6\001\002" +
    "\000\104\010\uffe1\023\uffe1\024\uffe1\030\uffe1\033\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\055\uffe1\061" +
    "\uffe1\063\uffe1\070\uffe1\074\uffe1\105\uffe1\107\uffe1\112\uffe1" +
    "\127\uffe1\141\uffe1\142\uffe1\151\uffe1\154\uffe1\156\uffe1\160" +
    "\uffe1\166\uffe1\001\002\000\004\163\u01e2\001\002\000\030" +
    "\006\uffe3\010\uffe3\014\uffe3\024\uffe3\040\uffe3\061\uffe3\065" +
    "\uffe3\074\uffe3\126\uffe3\203\uffe3\207\uffe3\001\002\000\004" +
    "\164\u01e3\001\002\000\004\165\u01e4\001\002\000\030\006" +
    "\uff2a\010\uff2a\014\uff2a\024\uff2a\040\uff2a\061\uff2a\065\uff2a" +
    "\074\uff2a\126\uff2a\203\uff2a\207\uff2a\001\002\000\030\006" +
    "\uff32\010\uff32\014\uff32\024\uff32\040\uff32\061\uff32\065\uff32" +
    "\074\uff32\126\uff32\203\uff32\207\uff32\001\002\000\004\126" +
    "\u01e7\001\002\000\004\077\u01e8\001\002\000\004\177\277" +
    "\001\002\000\004\202\u011e\001\002\000\004\125\u01eb\001" +
    "\002\000\004\177\277\001\002\000\004\202\u011e\001\002" +
    "\000\030\006\uffb7\010\uffb7\014\uffb7\024\uffb7\040\uffb7\061" +
    "\uffb7\065\uffb7\074\uffb7\126\uffb7\203\uffb7\207\uffb7\001\002" +
    "\000\016\171\032\172\025\173\026\174\030\175\031\176" +
    "\024\001\002\000\006\167\034\170\033\001\002\000\004" +
    "\203\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ef\000\012\002\003\003\006\005\007\006\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\017" +
    "\014\016\015\014\016\015\001\001\000\002\001\001\000" +
    "\010\004\010\005\011\006\005\001\001\000\002\001\001" +
    "\000\010\004\012\005\011\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\020\u0186\021\u018c\022\u018e" +
    "\027\u0192\033\u0194\051\u0189\053\u018a\060\u0187\001\001\000" +
    "\034\017\065\023\100\031\076\032\111\040\051\044\101" +
    "\045\055\051\075\052\115\055\107\056\045\057\042\066" +
    "\056\001\001\000\012\013\035\014\036\015\014\016\015" +
    "\001\001\000\004\007\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\037\014\036\015\014\016\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\175\001\001\000\004\036\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\071\275\001\001\000\002\001\001\000\004" +
    "\072\300\001\001\000\004\072\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\u0106\042\u0108\043\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\u010b\043\u0107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u011e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0148\001\001" +
    "\000\004\043\u0151\001\001\000\004\050\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u014c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\u0152\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\u0176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u019d\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0195\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u0197\001\001\000\002\001\001\000\004\064" +
    "\u019a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\u019f\001\001\000\004\065\u01a1\001\001\000\004\071\u01a2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u01a7" +
    "\001\001\000\002\001\001\000\004\071\u01a9\001\001\000" +
    "\004\065\u01aa\001\001\000\002\001\001\000\004\030\u01ae" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u01b7\001\001\000\002\001\001" +
    "\000\004\071\u01b9\001\001\000\002\001\001\000\004\035" +
    "\u01bf\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u01cf\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\u01d2\001\001\000\002\001\001\000" +
    "\004\062\u01d4\001\001\000\002\001\001\000\014\024\u01d9" +
    "\027\u01e0\054\u01d8\071\u01de\073\u01da\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\u01e8\001\001\000\004\026\u01e9\001\001\000" +
    "\002\001\001\000\004\071\u01eb\001\001\000\004\026\u01ec" +
    "\001\001\000\002\001\001\000\004\010\u01ee\001\001\000" +
    "\004\011\u01ef\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // instant_replay ::= INSTANT_LITERAL REPLAY_LITERAL SUPPORT_LITERAL RULING_LITERAL 
            {
              InstantReplay RESULT =null;
		 RESULT = new InstantReplay(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instant_replay",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // ejection_ending ::= FIRST_LITERAL FLAGRANT_LITERAL TYPE_LITERAL NUMBER 
            {
              EjectionEnding RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value);
		 RESULT = new FlagrantEjectionEnding(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // ejection_ending ::= NO_LITERAL EJECTION_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("No Ejection"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // ejection_ending ::= OTHER_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Other"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // ejection_ending ::= SECOND_LITERAL TECHNICAL_LITERAL 
            {
              EjectionEnding RESULT =null;
		 RESULT = new EjectionEnding("Second Technical"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection_ending",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // ejection ::= EJECTION_LITERAL COLON ejection_ending 
            {
              Ejection RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EjectionEnding e = (EjectionEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ejection(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejection",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // taunting_tech ::= TAUNTING_LITERAL TECHNICAL_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new TauntingTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("taunting_tech",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // unsportsmanlike_tech ::= UNSPORTSMANLIKE TECHNICAL_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new USLTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unsportsmanlike_tech",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // delay_technical ::= DELAY_LITERAL TECHNICAL_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new DelayTechnical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("delay_technical",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // team_violation_type ::= DELAY_LITERAL OF_LITERAL GAME_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DelayGameViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_violation_type",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // team_violation ::= VIOLATION_LITERAL COLON team_violation_type 
            {
              Violation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViolationType v = (ViolationType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Violation(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_violation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // team_violation ::= NUMBER SEC_LITERAL INBOUND_LITERAL TURNOVER_LITERAL COLON 
            {
              Violation RESULT =null;
		 RESULT = new FiveSecInboundViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_violation",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // violation_type ::= DOUBLE_LITERAL LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DoubleLaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // violation_type ::= JUMP_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new JumpBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // violation_type ::= KICKED_LITERAL BALL_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new KickedBallViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // violation_type ::= LANE_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new LaneViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // violation_type ::= DEFENSIVE_LITERAL GOALTENDING_LITERAL 
            {
              ViolationType RESULT =null;
		 RESULT = new DefGTViolation(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation_type",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // violation ::= VIOLATION_LITERAL COLON violation_type 
            {
              Violation RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ViolationType v = (ViolationType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Violation(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("violation",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // double_technical ::= DOUBLE_LITERAL TECHNICAL_LITERAL player_statement COMMA player_statement 
            {
              Technical RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleTechnical(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("double_technical",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // double_technical ::= TECHNICAL_LITERAL player_statement COMMA player_statement 
            {
              Technical RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DoubleTechnical(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("double_technical",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // technical ::= TECHNICAL_LITERAL 
            {
              Technical RESULT =null;
		 RESULT = new Technical(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("technical",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // rebound ::= REBOUND_LITERAL 
            {
              Rebound RESULT =null;
		 RESULT = new Rebound(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // rebound ::= REBOUND_LITERAL LEFT_PAREN OFF COLON NUMBER DEF COLON NUMBER RIGHT_PAREN 
            {
              Rebound RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer n1 = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value);
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value);
		 RESULT = new Rebound(n1, n2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rebound",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // block_statement ::= 
            {
              Block RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // block_statement ::= BLOCK_LITERAL COLON player_statement LEFT_PAREN NUMBER BLK RIGHT_PAREN 
            {
              Block RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Block(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // assist_statement ::= 
            {
              Assist RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // assist_statement ::= ASSIST_LITERAL COLON player_statement LEFT_PAREN NUMBER AST RIGHT_PAREN 
            {
              Assist RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Assist(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assist_statement",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // shot_outcome ::= MISSED_LITERAL block_statement 
            {
              ShotOutcome RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShotOutcome(false, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_outcome",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // shot_outcome ::= MADE_LITERAL point_total assist_statement 
            {
              ShotOutcome RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assist a = (Assist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ShotOutcome(true, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_outcome",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // shot_type ::= REVERSE_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // shot_type ::= FADEAWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // shot_type ::= FADEAWAY_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fadeaway Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // shot_type ::= TURNAROUND_LITERAL FADEAWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fadeaway Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // shot_type ::= PUTBACK_LITERAL REVERSE_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Reverse Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // shot_type ::= DRIVING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // shot_type ::= PULLUP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // shot_type ::= RUNNING_LITERAL TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // shot_type ::= PUTBACK_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // shot_type ::= RUNNING_LITERAL REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // shot_type ::= RUNNING_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // shot_type ::= RUNNING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // shot_type ::= RUNNING_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // shot_type ::= TURNAROUND_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // shot_type ::= FADE_LITERAL AWAY_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // shot_type ::= JUMP_LITERAL BANK_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // shot_type ::= DRIVING_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // shot_type ::= RUNNING_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // shot_type ::= DRIVING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // shot_type ::= DRIVING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // shot_type ::= RUNNING_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // shot_type ::= DRIVING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // shot_type ::= RUNNING_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // shot_type ::= JUMP_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // shot_type ::= FLOATING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Floating Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // shot_type ::= JUMP_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // shot_type ::= DRIVING_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // shot_type ::= DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // shot_type ::= REVERSE_LITERAL SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // shot_type ::= FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // shot_type ::= RUNNING_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // shot_type ::= TURNAROUND_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // shot_type ::= REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // shot_type ::= STEP_LITERAL BACK_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Step Back Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // shot_type ::= PUTBACK_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // shot_type ::= PUTBACK_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Putback Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // shot_type ::= TURNAROUND_LITERAL FADE_LITERAL AWAY_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Fade Away Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // shot_type ::= FADE_LITERAL AWAY_LITERAL JUMPER_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Fade Away Jumper Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // shot_type ::= ALLEY_LITERAL OOP_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // shot_type ::= ALLEY_LITERAL OOP_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Alley Oop Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // shot_type ::= SLAM_LITERAL DUNK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Slam Dunk Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // shot_type ::= HOOK_LITERAL BANK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Bank Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // shot_type ::= DUNK_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Dunk"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // shot_type ::= DRIVING_LITERAL FINGER_LITERAL ROLL_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Finger Roll Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // shot_type ::= TURNAROUND_LITERAL HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Turnaround Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // shot_type ::= HOOK_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Hook Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // shot_type ::= DRIVING_LITERAL REVERSE_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Reverse Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // shot_type ::= TIP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Tip Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // shot_type ::= PULLUP_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Pullup Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // shot_type ::= DRIVING_LITERAL LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Driving Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // shot_type ::= LAYUP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Layup Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // shot_type ::= RUNNING_LITERAL JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Running Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // shot_type ::= JUMP_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ShotType("Jump Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // shot_type ::= THREEPT_LITERAL SHOT_LITERAL 
            {
              ShotType RESULT =null;
		 RESULT = new ThreePointShotType("3pt Shot"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // shot ::= shot_type COLON shot_outcome 
            {
              Shot RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ShotType t = (ShotType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ShotOutcome o = (ShotOutcome)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Shot(t, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shot",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // point_total ::= LEFT_PAREN NUMBER PTS RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("point_total",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // free_throw_outcome ::= point_total 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // free_throw_outcome ::= MISSED_LITERAL 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_outcome",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // free_throw_predicate ::= free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FreeThrowPredicate(o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // free_throw_predicate ::= NUMBER OF_LITERAL NUMBER free_throw_outcome 
            {
              FreeThrowPredicate RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value);
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value);
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FreeThrowPredicate(n1, n2, o); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_predicate",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // free_throw_type ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // free_throw_type ::= TECHNICAL_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Technical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // free_throw_type ::= CLEAR_LITERAL PATH_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Clear Path"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // free_throw_type ::= FLAGRANT_LITERAL 
            {
              String RESULT =null;
		 RESULT = "Flagrant"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw_type",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // free_throw ::= FREE_LITERAL THROW_LITERAL free_throw_type free_throw_predicate 
            {
              FreeThrow RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrowPredicate p = (FreeThrowPredicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FreeThrow(t, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("free_throw",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // steal_statement ::= 
            {
              Steal RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // steal_statement ::= STEAL_LITERAL COLON player_statement LEFT_PAREN NUMBER ST RIGHT_PAREN 
            {
              Steal RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Steal(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("steal_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // team_turnover_type ::= BACKCOURT_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // team_turnover_type ::= EXCESS_LITERAL TIMEOUT_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ExcessTimeoutTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // team_turnover_type ::= LOST_LITERAL BALL_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // team_turnover_type ::= INBOUND_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // team_turnover_type ::= TRAVELING_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // team_turnover_type ::= NUMBER SECOND_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value);
		 RESULT = new SecViolationTO(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // team_turnover_type ::= BAD_LITERAL PASS_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // team_turnover_type ::= SHOT_LITERAL CLOCK_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new ShotClockTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover_type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // team_turnover ::= TURNOVER_LITERAL COLON team_turnover_type 
            {
              Turnover RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TurnoverType t = (TurnoverType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TeamTurnover(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_turnover",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // turnover_total ::= LEFT_PAREN NUMBER TO RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_total",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // turnover_type ::= JUMP_LITERAL BALL_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new JumpBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // turnover_type ::= ILLEGAL_LITERAL ASSIST_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalAssistTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // turnover_type ::= NO_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new NoTurnoverTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // turnover_type ::= DOUBLE_LITERAL PERSONAL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoublePersonalTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // turnover_type ::= KICKED_LITERAL BALL_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new KickedBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // turnover_type ::= INBOUND_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new InboundTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // turnover_type ::= LANE_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LaneViolationTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // turnover_type ::= DOUBLE_LITERAL DRIBBLE_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DoubleDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // turnover_type ::= OFFENSIVE_LITERAL FOUL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveFoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // turnover_type ::= OFFENSIVE_LITERAL GOALTENDING_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OffensiveGoaltendingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // turnover_type ::= FOUL_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new FoulTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // turnover_type ::= BACKCOURT_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BackcourtTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // turnover_type ::= ILLEGAL_LITERAL SCREEN_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new IllegalScreenTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // turnover_type ::= DISCONTINUE_LITERAL DRIBBLE_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new DiscontinueDribbleTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // turnover_type ::= POSS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PossLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // turnover_type ::= NUMBER SECOND_LITERAL VIOLATION_LITERAL 
            {
              TurnoverType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value);
		 RESULT = new SecViolationTO(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // turnover_type ::= STEP_LITERAL OUT_LITERAL OF_LITERAL BOUNDS_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new StepOOBTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // turnover_type ::= OUT_LITERAL OF_LITERAL BOUNDS_LITERAL LOST_LITERAL BALL_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new OOBLostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // turnover_type ::= PALMING_LITERAL TURNOVER_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new PalmingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // turnover_type ::= TRAVELING_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new TravelingTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // turnover_type ::= BAD_LITERAL PASS_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new BadPassTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // turnover_type ::= LOST_LITERAL BALL_LITERAL 
            {
              TurnoverType RESULT =null;
		 RESULT = new LostBallTO(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover_type",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // turnover ::= ILLEGAL_LITERAL SCREEN_LITERAL TURNOVER_LITERAL COLON turnover_total 
            {
              Turnover RESULT =null;
		 RESULT = new Turnover(new IllegalScreenTO()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // turnover ::= BASKET_LITERAL FROM_LITERAL BELOW_LITERAL TURNOVER_LITERAL COLON turnover_total 
            {
              Turnover RESULT =null;
		 RESULT = new Turnover(new BasketFromBelowTO()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // turnover ::= SWINGING_LITERAL ELBOWS_LITERAL TURNOVER_LITERAL COLON turnover_total 
            {
              Turnover RESULT =null;
		 RESULT = new Turnover(new SwingingElbowsTO()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // turnover ::= PUNCHED_LITERAL BALL_LITERAL TURNOVER_LITERAL COLON turnover_total 
            {
              Turnover RESULT =null;
		 RESULT = new Turnover(new PunchedBallTO()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // turnover ::= TURNOVER_LITERAL COLON turnover_type turnover_total steal_statement 
            {
              Turnover RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TurnoverType t1 = (TurnoverType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Steal s = (Steal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Turnover(t1, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("turnover",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // substitution ::= SUBSTITUTION_LITERAL REPLACED_LITERAL BY_LITERAL player_statement 
            {
              Substitution RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Substitution(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("substitution",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // timeout_type ::= OFFICIAL_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Offical"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // timeout_type ::= NO_LITERAL TIMEOUT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "No Timeout"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // timeout_type ::= SHORT_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Short"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // timeout_type ::= REGULAR_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "Regular"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeout_type",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // team_timeout ::= TIMEOUT_LITERAL COLON timeout_type 
            {
              Timeout RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Timeout(tt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_timeout",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // double_personal_foul ::= FOUL_LITERAL COLON DOUBLE_LITERAL PERSONAL_LITERAL player_statement foul_total COMMA player_statement foul_total 
            {
              Foul RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoublePersonalFoul(p1, p2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("double_personal_foul",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // foul_total ::= LEFT_PAREN NUMBER PF RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_total",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // foul_type ::= INBOUND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new InboundFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // foul_type ::= SHOOTING_LITERAL BLOCK_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // foul_type ::= FLAGRANT_LITERAL TYPE_LITERAL NUMBER 
            {
              FoulType RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = Integer.parseInt((String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value);
		 RESULT = new FlagrantFoulType(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // foul_type ::= AWAY_LITERAL FROM_LITERAL PLAY_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new AwayFromPlayFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // foul_type ::= CLEAR_LITERAL PATH_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ClearPathFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // foul_type ::= PERSONAL_LITERAL TAKE_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalTakeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // foul_type ::= OFFENSIVE_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // foul_type ::= PERSONAL_LITERAL BLOCK_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalBlockFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // foul_type ::= DEFENSE_LITERAL NUMBER SECOND_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new DefenseThreeSecFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // foul_type ::= SHOOTING_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new ShootingFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // foul_type ::= OFFENSIVE_LITERAL CHARGE_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new OffensiveChargeFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // foul_type ::= PERSONAL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new PersonalFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // foul_type ::= LOOSE_LITERAL BALL_LITERAL 
            {
              FoulType RESULT =null;
		 RESULT = new LooseBallFoulType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul_type",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // foul ::= FOUL_LITERAL COLON foul_type foul_total 
            {
              Foul RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FoulType f = (FoulType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Foul(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("foul",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // jump_ball_ending ::= 
            {
              JumpBallEnding RESULT =null;
		 RESULT = new JumpBallEnding(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // jump_ball_ending ::= LEFT_PAREN player_statement GAINS_LITERAL POSSESSION_LITERAL RIGHT_PAREN 
            {
              JumpBallEnding RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new JumpBallEnding(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_ending",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // jump_ball_alt ::= BALL_LITERAL player_statement VS_LITERAL player_statement jump_ball_ending 
            {
              JumpBall RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBallEnding e = (JumpBallEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JumpBall(p1, p2, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball_alt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // jump_ball ::= JUMP_LITERAL BALL_LITERAL player_statement VS_LITERAL player_statement jump_ball_ending 
            {
              JumpBall RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Player p1 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Player p2 = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBallEnding e = (JumpBallEnding)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JumpBall(p1, p2, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_ball",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // other_play_action ::= 
            {
              PlayAction RESULT =null;
		 RESULT = new PlayAction(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // other_play_action ::= jump_ball_alt 
            {
              PlayAction RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBall j = (JumpBall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = j; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // other_play_action ::= team_violation 
            {
              PlayAction RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation tv = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // other_play_action ::= team_turnover 
            {
              PlayAction RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Turnover tt = (Turnover)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // other_play_action ::= rebound 
            {
              PlayAction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Rebound r = (Rebound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // other_play_action ::= double_technical 
            {
              PlayAction RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical dt = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // other_play_action ::= team_timeout 
            {
              PlayAction RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Timeout tt = (Timeout)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // other_play_action ::= jump_ball 
            {
              PlayAction RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		JumpBall j = (JumpBall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = j; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("other_play_action",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // play_action ::= ejection 
            {
              PlayAction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ejection e = (Ejection)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // play_action ::= taunting_tech 
            {
              PlayAction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical t = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // play_action ::= unsportsmanlike_tech 
            {
              PlayAction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical t = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // play_action ::= violation 
            {
              PlayAction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Violation v = (Violation)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // play_action ::= technical 
            {
              PlayAction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical t = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // play_action ::= rebound 
            {
              PlayAction RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Rebound r = (Rebound)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // play_action ::= shot 
            {
              PlayAction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Shot s = (Shot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // play_action ::= free_throw 
            {
              PlayAction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FreeThrow f = (FreeThrow)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // play_action ::= turnover 
            {
              PlayAction RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Turnover t = (Turnover)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // play_action ::= substitution 
            {
              PlayAction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Substitution s = (Substitution)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // play_action ::= foul 
            {
              PlayAction RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Foul f = (Foul)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play_action",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // team_statement_p ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_statement_p",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // team_statement_p ::= TEAM team_statement_p 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s1 + " " + s2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_statement_p",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // team_statement ::= TEAM team_statement_p 
            {
              Team RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Team(s1 + " " + s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("team_statement",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // identifying_timestamp_player ::= LEFT_BRAC TIME team_statement RIGHT_BRAC player_statement 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Player p = (Player)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlayerTimeStamp(s1, s2, p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_player",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC double_personal_foul 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Foul f = (Foul)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DPTimeStamp(s1, s2, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC team_timeout 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Timeout tt = (Timeout)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimeoutTimeStamp(s1, s2, tt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC delay_technical 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Technical dt = (Technical)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DelayTimeStamp(s1, s2, dt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC instant_replay 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstantReplay ir = (InstantReplay)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IRTimeStamp(s1, s2, ir); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC JUMP_LITERAL 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new JumpTimeStamp(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC DOUBLE_LITERAL 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new DoubleTimeStamp(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifying_timestamp_other ::= LEFT_BRAC TIME team_statement RIGHT_BRAC TEAM_LITERAL 
            {
              TimeStamp RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Team s2 = (Team)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new TeamTimeStamp(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // identifying_timestamp_other ::= LEFT_BRAC TIME RIGHT_BRAC 
            {
              TimeStamp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeStamp(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifying_timestamp_other",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // player_statement_p ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // player_statement_p ::= PLAYER_NAME player_statement_p 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s1 + " " + s2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement_p",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // player_statement ::= PLAYER_NAME player_statement_p 
            {
              Player RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Player(s1 + " " + s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("player_statement",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // play ::= identifying_timestamp_other other_play_action 
            {
              Play RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TimeStamp ts = (TimeStamp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PlayAction pa = (PlayAction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play(ts, pa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // play ::= identifying_timestamp_player play_action 
            {
              Play RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TimeStamp ts = (TimeStamp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PlayAction pa = (PlayAction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Play(ts, pa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("play",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // plays_p ::= 
            {
              ArrayList<Play> RESULT =null;
		 RESULT = new ArrayList<Play>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // plays_p ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays_p",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // plays ::= play plays_p 
            {
              ArrayList<Play> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Play p1 = (Play)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Play> p2 = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Play> playList = new ArrayList<Play>();
				   playList.add(p1);
                                   playList.addAll(p2);
                                   RESULT = playList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plays",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // period_type ::= OVERTIME_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // period_type ::= QUARTER_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_type",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // period_identifier ::= SIXTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // period_identifier ::= FIFTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // period_identifier ::= FOURTH 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // period_identifier ::= THIRD 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // period_identifier ::= SECOND 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // period_identifier ::= FIRST 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period_identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // end_of_period ::= END_LITERAL OF_LITERAL period_identifier period_type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end_of_period",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // start_of_period ::= START_LITERAL OF_LITERAL period_identifier period_type 
            {
              PeriodIdentification RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PeriodIdentification(s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_of_period",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // period ::= start_of_period plays end_of_period 
            {
              Period RESULT =null;
		int pi1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pi1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PeriodIdentification pi1 = (PeriodIdentification)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Play> pl = (ArrayList<Play>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Period(pi1, pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("period",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // periods_p ::= 
            {
              ArrayList<Period> RESULT =null;
		 RESULT = new ArrayList<Period>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // periods_p ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods_p",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // periods ::= period periods_p 
            {
              ArrayList<Period> RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Period p1 = (Period)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p2 = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Period> periodList = new ArrayList<Period>();
				   periodList.add(p1);
                                   periodList.addAll(p2);
                                   RESULT = periodList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("periods",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= game EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Game start_val = (Game)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // game ::= periods 
            {
              Game RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Period> p = (ArrayList<Period>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Game(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("game",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

